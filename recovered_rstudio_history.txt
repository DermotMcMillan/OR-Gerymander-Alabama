mutate(cover_type = str_replace(cover_type, "native_change", "aa_native_change")) %>%
mutate(color = ifelse(change <0, "#8b0000","#006400"))
boxplot_vis_data <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "cover_type",
values_to = "growth") %>%
mutate(cover_type = str_replace(cover_type, "native_growth", "aa_native_growth"))
data <- read.csv("real_data.csv") %>%
mutate(Year = as.character(Year)) %>%
mutate(p_veg = p_gorse + p_native) %>%
mutate(grass_to_veg = p_grass/ p_veg) %>%
mutate(native_growth = 100 * p_native / (p_gorse + p_grass + p_native)) %>%
mutate(gorse_growth = 100 * p_gorse / (p_gorse + p_grass + p_native)) %>%
mutate(grass_growth = 100 * p_grass / (p_gorse + p_grass + p_native))
setwd("~/Desktop/r_stuff/Terrestrial Ecology")
library(tidyverse)
library(Hmisc)
library("writexl")
data <- read.csv("real_data.csv") %>%
mutate(Year = as.character(Year)) %>%
mutate(p_veg = p_gorse + p_native) %>%
mutate(grass_to_veg = p_grass/ p_veg) %>%
mutate(native_growth = 100 * p_native / (p_gorse + p_grass + p_native)) %>%
mutate(gorse_growth = 100 * p_gorse / (p_gorse + p_grass + p_native)) %>%
mutate(grass_growth = 100 * p_grass / (p_gorse + p_grass + p_native))
vis_data <- data %>%
select(!c("p_unknown")) %>%
pivot_longer(., cols = c("p_native","p_gorse", "p_grass"), names_to = "cover_type", values_to = "pct")
p_chng_native_by_yr <- data %>%
select(c( "Photopoint", "Year", "native_growth")) %>%
pivot_wider(names_from = "Year", names_prefix = "pct_", values_from = "native_growth") %>%
mutate(pct_chng_2018 = 100 * (pct_2018-pct_2014)/pct_2018) %>%
mutate(pct_chng_2024 = 100 * (pct_2024-pct_2018)/pct_2024) %>%
select(c( "Photopoint", "pct_chng_2018", "pct_chng_2024")) %>%
pivot_longer(., cols = c("pct_chng_2018", "pct_chng_2024"), names_to = "Year", values_to = "pct_chng")
grass_to_veg_by_yr <- data %>%
select(c("Photopoint", "Year", "grass_to_veg")) %>%
pivot_wider(names_from = "Year", names_prefix = "rat", values_from = "grass_to_veg") %>%
mutate(change = rat2024 - rat2014) %>%
pivot_longer(., cols = c("rat2014", "rat2018", "rat2024"), names_to = "Year", values_to = "ratio")
growth_by_yr <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_wider(names_from = "Year",
values_from = c("native_growth", "gorse_growth", "grass_growth")) %>%
mutate(native_change = native_growth_2024 - native_growth_2014) %>%
mutate(gorse_change = gorse_growth_2024 - gorse_growth_2014) %>%
mutate(grass_change = grass_growth_2024 - grass_growth_2014)
growth_by_yr_vis <- growth_by_yr %>%
select(c("Photopoint", "native_change", "gorse_change", "grass_change")) %>%
pivot_longer(., cols = c("native_change", "gorse_change", "grass_change"),
names_to = "cover_type",
values_to = "change") %>%
mutate(cover_type = str_replace(cover_type, "native_change", "aa_native_change")) %>%
mutate(color = ifelse(change <0, "#8b0000","#006400"))
boxplot_vis_data <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "cover_type",
values_to = "growth") %>%
mutate(cover_type = str_replace(cover_type, "native_growth", "aa_native_growth"))
#stacked by year
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
geom_bar(position="fill", stat="identity")  +
labs(title = "Land Cover Types at Panama Rock Geopark",
y = "Percent",
x = "Year") +
scale_fill_discrete(name = "Cover Type", labels = c("Gorse", "Grass", "Native"))
#faceted by year
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
geom_bar(position="dodge", stat="identity")
#by photopoint
ggplot(data = data, aes(fill = Year,
y = p_native,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity")
#pct change
ggplot(data = p_chng_native_by_yr, aes(fill = Year,
y = pct_chng,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity")
#grass to veg
ggplot(data = grass_to_veg_by_yr, aes(y = change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity")
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_discrete(name = "Cover Type", labels = c("Gorse", "Grass", "Native"))
#native change by photopoint
ggplot(data = growth_by_yr, aes(y = native_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in native cover") +
labs(title = "Difference in native cover between 2014 and 2024")
#native growth by year
ggplot(data = data, aes(y = native_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent native") +
labs(title = "Native canopy cover by year")
#gorse change by photopoint
ggplot(data = growth_by_yr, aes(y = gorse_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in gorse cover") +
labs(title = "Difference in gorse cover between 2014 and 2024")
#gorse growth by year
ggplot(data = data, aes(y = gorse_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent gorse") +
labs(title = "Gorse cover by year")
#grass change by photopoint
ggplot(data = growth_by_yr, aes(y = grass_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in grass cover") +
labs(title = "Difference in grass cover between 2014 and 2024")
#grass growth by year
ggplot(data = data, aes(y = grass_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent grass") +
labs(title = "Grass cover by year")
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20)) +
#change by photopoint
change_facet_names <- c(`aa_native_change` = "Native",
`gorse_change` = "Gorse",
`grass_change` = "Grass")
ggplot(data = growth_by_yr_vis, aes(y = change,
x = Photopoint,
fill = color)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(change_facet_names)) +
scale_fill_identity(guide = FALSE) +
scale_y_continuous(name = "Difference in percent cover") +
labs(title = "Difference in percent cover between 2024 and 2014")
means <- vis_data %>%
group_by(Year, cover_type) %>%
summarise(mean = mean(pct))
write_xlsx(means, "means.xlsx")
quants <- quantile(data$native_growth)
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20)) +
#change by photopoint
change_facet_names <- c(`aa_native_change` = "Native",
`gorse_change` = "Gorse",
`grass_change` = "Grass")
ggplot(data = growth_by_yr_vis, aes(y = change,
x = Photopoint,
fill = color)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(change_facet_names)) +
scale_fill_identity(guide = FALSE) +
scale_y_continuous(name = "Difference in percent cover") +
labs(title = "Difference in percent cover between 2024 and 2014")
means <- vis_data %>%
group_by(Year, cover_type) %>%
summarise(mean = mean(pct))
ggplot(data = growth_by_yr_vis, aes(y = change,
x = Photopoint,
fill = color)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(change_facet_names)) +
scale_fill_identity(guide = FALSE) +
scale_y_continuous(name = "Difference in percent cover") +
labs(title = "Difference in percent cover between 2024 and 2014")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20)) +
#change by photopoint
change_facet_names <- c(`aa_native_change` = "Native",
`gorse_change` = "Gorse",
`grass_change` = "Grass")
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20),
axis.title.x=element_blank())
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20)
axis.text.x = element_text(size = 20),
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20),
axis.text.x = element_text(size = 20),
axis.title.x = element_blank(),
axis.title.y = element_blank())
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
scale_fill_brewer(palette="BuPu")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
scale_fill_brewer(palette="BuPu") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot(color="red", fill="orange", alpha=0.2) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot(color="darkgreen", fill="darkgreen", alpha=0.2) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot(color="darkgreen", fill="green", alpha=0.2) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot(color= cover_type, fill="green", alpha=0.2) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot(color = "cover_type", fill="green", alpha=0.2) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot(color="darkgreen", fill="green", alpha=0.2) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = growth_by_yr_vis, aes(y = change,
x = Photopoint,
fill = color)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(change_facet_names)) +
scale_fill_identity(guide = FALSE) +
scale_y_continuous(name = "Difference in percent cover") +
labs(title = "Difference in percent cover between 2024 and 2014")
#change by photopoint
change_facet_names <- c(`aa_native_change` = "Native",
`gorse_change` = "Gorse",
`grass_change` = "Grass")
ggplot(data = growth_by_yr_vis, aes(y = change,
x = Photopoint,
fill = color)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(change_facet_names)) +
scale_fill_identity(guide = FALSE) +
scale_y_continuous(name = "Difference in percent cover") +
labs(title = "Difference in percent cover between 2024 and 2014")
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year)) +
geom_boxplot(color="darkgreen", fill= cover_type, alpha=0.2) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year
fill = cover_type)) +
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year
fill = cover_type))) +
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="darkgreen", alpha=0.2) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="darkgreen", alpha=0.2) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="darkgreen", alpha=0.2) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="darkgreen", alpha=0.7) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="lightgreen", alpha=0.7) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="lightgreen", alpha=0.7) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none") +
theme_minimal()
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="lightgreen", alpha=0.7) +
scale_fill_viridis_d() +
theme_minimal() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none")
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="lightgreen", alpha=0.7) +
scale_fill_viridis_d() +
theme_minimal() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "darkgrey",
colour = "darkgrey",
size = 0.5, linetype = "solid"),)
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="lightgreen", alpha=0.7) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "darkgrey",
colour = "darkgrey",
size = 0.5, linetype = "solid"),)
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="lightgreen") +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "darkgrey",
colour = "darkgrey",
size = 0.5, linetype = "solid"),)
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="lightgreen") +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "darkgreen",
colour = "darkgreen",
size = 0.5, linetype = "solid"),)
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="lightgreen") +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),)
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="darkgrey") +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "black"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "black"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="black") +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="black", alpha = 0.7, linewidth = 3) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="black", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="black", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#6aa84fff",
colour = "#6aa84fff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="black", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="black", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey"),
strip.background = element_rect(fill="#b8d3acff"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="black", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="black", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 025, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="black", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#38761dff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('plot.png', plot, bg='transparent')
plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('plot.png', plot, bg='transparent')
## violin
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_violin(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
## violin
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_violin(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA)) +
geom_boxplot(width=0.1)
## violin
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_violin(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill = "#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA)) +
geom_boxplot(width = 0.1, fill = "#6aa84fff", color = "#dde9d9ff")
plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
data <- read.csv("real_data.csv") %>%
mutate(Year = as.character(Year)) %>%
mutate(p_veg = p_gorse + p_native) %>%
mutate(grass_to_veg = p_grass/ p_veg) %>%
mutate(native_growth = 100 * p_native / (p_gorse + p_grass + p_native)) %>%
mutate(gorse_growth = 100 * p_gorse / (p_gorse + p_grass + p_native)) %>%
mutate(grass_growth = 100 * p_grass / (p_gorse + p_grass + p_native))
library(tidyverse)
library(Hmisc)
library("writexl")
data <- read.csv("real_data.csv") %>%
mutate(Year = as.character(Year)) %>%
mutate(p_veg = p_gorse + p_native) %>%
mutate(grass_to_veg = p_grass/ p_veg) %>%
mutate(native_growth = 100 * p_native / (p_gorse + p_grass + p_native)) %>%
mutate(gorse_growth = 100 * p_gorse / (p_gorse + p_grass + p_native)) %>%
mutate(grass_growth = 100 * p_grass / (p_gorse + p_grass + p_native))
setwd("~/Desktop/r_stuff/Terrestrial Ecology")
data <- read.csv("real_data.csv") %>%
mutate(Year = as.character(Year)) %>%
mutate(p_veg = p_gorse + p_native) %>%
mutate(grass_to_veg = p_grass/ p_veg) %>%
mutate(native_growth = 100 * p_native / (p_gorse + p_grass + p_native)) %>%
mutate(gorse_growth = 100 * p_gorse / (p_gorse + p_grass + p_native)) %>%
mutate(grass_growth = 100 * p_grass / (p_gorse + p_grass + p_native))
vis_data <- data %>%
select(!c("p_unknown")) %>%
pivot_longer(., cols = c("p_native","p_gorse", "p_grass"), names_to = "cover_type", values_to = "pct")
p_chng_native_by_yr <- data %>%
select(c( "Photopoint", "Year", "native_growth")) %>%
pivot_wider(names_from = "Year", names_prefix = "pct_", values_from = "native_growth") %>%
mutate(pct_chng_2018 = 100 * (pct_2018-pct_2014)/pct_2018) %>%
mutate(pct_chng_2024 = 100 * (pct_2024-pct_2018)/pct_2024) %>%
select(c( "Photopoint", "pct_chng_2018", "pct_chng_2024")) %>%
pivot_longer(., cols = c("pct_chng_2018", "pct_chng_2024"), names_to = "Year", values_to = "pct_chng")
grass_to_veg_by_yr <- data %>%
select(c("Photopoint", "Year", "grass_to_veg")) %>%
pivot_wider(names_from = "Year", names_prefix = "rat", values_from = "grass_to_veg") %>%
mutate(change = rat2024 - rat2014) %>%
pivot_longer(., cols = c("rat2014", "rat2018", "rat2024"), names_to = "Year", values_to = "ratio")
growth_by_yr <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_wider(names_from = "Year",
values_from = c("native_growth", "gorse_growth", "grass_growth")) %>%
mutate(native_change = native_growth_2024 - native_growth_2014) %>%
mutate(gorse_change = gorse_growth_2024 - gorse_growth_2014) %>%
mutate(grass_change = grass_growth_2024 - grass_growth_2014)
growth_by_yr_vis <- growth_by_yr %>%
select(c("Photopoint", "native_change", "gorse_change", "grass_change")) %>%
pivot_longer(., cols = c("native_change", "gorse_change", "grass_change"),
names_to = "cover_type",
values_to = "change") %>%
mutate(cover_type = str_replace(cover_type, "native_change", "aa_native_change")) %>%
mutate(color = ifelse(change <0, "#8b0000","#006400"))
boxplot_vis_data <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "cover_type",
values_to = "growth") %>%
mutate(cover_type = str_replace(cover_type, "native_growth", "aa_native_growth"))
View(data)
View(data)
indvdl_phtpnts <- data %>%
filter(photopoint %in% c("N","A","V"))
View(data)
indvdl_phtpnts <- data %>%
filter(Photopoint %in% c("N","A","V"))
View(indvdl_phtpnts)
View(indvdl_phtpnts)
indvdl_phtpnts <- data %>%
filter(Photopoint %in% c("N","Z","V"))
pcts <- indvdl_phtpnts %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth"))
View(pcts)
pcts <- indvdl_phtpnts %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth"))
write_xlsx(pct, "pcts.xlsx")
pcts <- indvdl_phtpnts %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth"))
write_xlsx(pcts, "pcts.xlsx")
indvdl_phtpnts <- data %>%
filter(Photopoint %in% c("N","Z","V")) %>%
group_by(Photopoint)
indvdl_phtpnts <- data %>%
filter(Photopoint %in% c("N","Z","V"))
N <- data %>%
filter(Photopoint == "N")
View(N)
N <- data %>%
filter(Photopoint == "N") %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct")
N <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
filter(Photopoint == "N") %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct")
ggplot(N, aes(y = pct, fill = type)) +
geom_bar(stat =" identity", width = 1) +
coord_polar("y", start = 0)
ggplot(N, aes(y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0)
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0)
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void()
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_discrete(labels=  c('Gorse', 'Grass', 'Native'))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_discrete(
title = "Cover Type",
labels = c('Gorse', 'Grass', 'Native'))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_discrete(name = "Cover Type",
labels = c('Gorse', 'Grass', 'Native'))
N <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
filter(Photopoint == "N") %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") +
mutate(type = str_replace(cover_type, "native_growth", "aa_native_growth"))
N <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
filter(Photopoint == "N") %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") +
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
N <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
filter(Photopoint == "N") %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") +
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
N <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
filter(Photopoint == "N") %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct")
N <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
filter(Photopoint == "N") %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") +
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
N <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
filter(Photopoint == "N") %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") %>%
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_discrete(name = "Cover Type",
labels = c('Gorse', 'Grass', 'Native'))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_discrete(name = "Cover Type",
labels = c('Native','Gorse', 'Grass'))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_viridis_d() +
scale_fill_discrete(name = "Cover Type",
labels = c('Native','Gorse', 'Grass'))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_discrete(name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
scale_fill_viridis_d()
plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_discrete(name = "Cover Type",
labels = c('Native','Gorse', 'Grass')
values = c("#440154", "#21918c", "#fde725"))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_discrete(name = "Cover Type",
labels = c('Native','Gorse', 'Grass'),
values = c("#440154", "#21918c", "#fde725"))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_discrete(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass'))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass'))
#boxplots
ggplot(N, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
pie_charts <- indvdl_phtpnts  %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") %>%
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
View(pie_charts)
N_data <- pie_charts %>%
filter(Photopoint = "N")
N_data <- pie_charts %>%
filter(Photopoint == "N")
View(N_data)
pie_charts <- data %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") %>%
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
N_data <- pie_charts %>%
filter(Photopoint == "N")
Z_data <- pie_charts %>%
filter(Photopoint == "Z")
V_data <- pie_charts %>%
filter(Photopoint == "V")
View(V_data)
#N
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
#Z
ggplot(Z_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "Z")
#V
ggplot(V_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "V")
#N
N_pie <- ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
#Z
Z_pie <- ggplot(Z_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "Z")
#V
V_pie <- ggplot(V_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "V")
ggsave('N_pie.png', N_pie, bg='transparent')
ggsave('Z_pie.png', Z_pie, bg='transparent')
ggsave('V_pie.png', V_pie, bg='transparent')
View(Z_data)
#native change by photopoint
ggplot(data = growth_by_yr, aes(y = native_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in native cover") +
labs(title = "Difference in native cover between 2014 and 2024")
#native growth by year
ggplot(data = data, aes(y = native_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent native") +
labs(title = "Native canopy cover by year")
#gorse change by photopoint
ggplot(data = growth_by_yr, aes(y = gorse_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in gorse cover") +
labs(title = "Difference in gorse cover between 2014 and 2024")
#gorse growth by year
ggplot(data = data, aes(y = gorse_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent gorse") +
labs(title = "Gorse cover by year")
#grass change by photopoint
ggplot(data = growth_by_yr, aes(y = grass_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in grass cover") +
labs(title = "Difference in grass cover between 2014 and 2024")
#grass growth by year
ggplot(data = data, aes(y = grass_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent grass") +
labs(title = "Grass cover by year")
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_discrete(name = "Cover Type", labels = c("Gorse", "Grass", "Native"))
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year"
strip.text.x = element_text(size = 30, face = "bold"),
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year",
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25)) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(title = element_text(size = 30),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25)) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(main.title = element_text(size = 30),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25)) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 30),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25)) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
ggplot(data = vis_data, aes(fill = cover_type,
#means
ggplot(data = vis_data, aes(fill = cover_type,
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 30),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 18)) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
ggplot(data = vis_data, aes(fill = cover_type,
#means
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 30),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 18)) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
means <- ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 30),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 18)) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
ggsave('means.png', means, bg='transparent')
#means
means <- ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data=mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 25, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 18)) +
stat_summary(fun.data=mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#3b3b3b",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
ggsave('means.png', means, bg='transparent')
#means
means <- ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data = mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 25, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 18)) +
stat_summary(fun.data = mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#aaaaaa",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
ggsave('means.png', means, bg='transparent')
#means
means <- ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data = mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 25, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 18)) +
stat_summary(fun.data = mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#888888",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
ggsave('means.png', means, bg='transparent')
#means
means <- ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data = mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 25, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 18)) +
stat_summary(fun.data = mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#666666",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
ggsave('means.png', means, bg='transparent')
#means
means <- ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data = mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 25, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18)) +
stat_summary(fun.data = mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#666666",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
ggsave('means.png', means, bg='transparent')
plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('plot.png', plot, bg='transparent')
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(alpha = 0.9, linewidth = 0.7) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(alpha = 0.9, linewidth = 0.7) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color = "#666666", linewidth = 0.7) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#fde725", "#21918c", "#440154")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(c("#440154", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#88388a", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
manuscript_plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#88388a", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('manuscript_plot.png', plot, bg='transparent')
manuscript_plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#88388a", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('manuscript_plot.png', plot, bg='transparent')
View(manuscript_plot)
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#88388a", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#88388a", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
manuscript_plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#88388a", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('manuscript_plot.png', manuscript_plot, bg='transparent')
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7, color = "#440154") +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type
color = cover_type)) +
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type,
color = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725")) +
scale_color_manual(values = c("#404040", "#202020", "#202020")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type,
color = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725")) +
scale_color_manual(values = c("#585858", "#202020", "#202020")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type,
color = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725")) +
scale_color_manual(values = c("#E8E8E8", "#202020", "#202020")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type,
color = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
ggplot(data = boxplot_vis_data, aes(y = growth,
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#31688e", "#35b779", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#472a7a", "#35b779", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#3d4e8a", "#35b779", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
g
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#3d4e8a", "#23898e", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#433d84", "#23898e", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#433d84", "#23898e", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#481769", "#23898e", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
g
g
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#914bbf", "#23898e", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#832bbd", "#23898e", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('manuscript_plot.png', manuscript_plot, bg='transparent')
ggsave('manuscript_plot.png', manuscript_plot, bg='transparent')
manuscript_plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#832bbd", "#23898e", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('manuscript_plot.png', manuscript_plot, bg='transparent')
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top") +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
library(tidyverse)
library(Hmisc)
library("writexl")
data <- read.csv("real_data.csv") %>%
mutate(Year = as.character(Year)) %>%
mutate(p_veg = p_gorse + p_native) %>%
mutate(grass_to_veg = p_grass/ p_veg) %>%
mutate(native_growth = 100 * p_native / (p_gorse + p_grass + p_native)) %>%
mutate(gorse_growth = 100 * p_gorse / (p_gorse + p_grass + p_native)) %>%
mutate(grass_growth = 100 * p_grass / (p_gorse + p_grass + p_native))
vis_data <- data %>%
select(!c("p_unknown")) %>%
pivot_longer(., cols = c("p_native","p_gorse", "p_grass"), names_to = "cover_type", values_to = "pct")
p_chng_native_by_yr <- data %>%
select(c( "Photopoint", "Year", "native_growth")) %>%
pivot_wider(names_from = "Year", names_prefix = "pct_", values_from = "native_growth") %>%
mutate(pct_chng_2018 = 100 * (pct_2018-pct_2014)/pct_2018) %>%
mutate(pct_chng_2024 = 100 * (pct_2024-pct_2018)/pct_2024) %>%
select(c( "Photopoint", "pct_chng_2018", "pct_chng_2024")) %>%
pivot_longer(., cols = c("pct_chng_2018", "pct_chng_2024"), names_to = "Year", values_to = "pct_chng")
grass_to_veg_by_yr <- data %>%
select(c("Photopoint", "Year", "grass_to_veg")) %>%
pivot_wider(names_from = "Year", names_prefix = "rat", values_from = "grass_to_veg") %>%
mutate(change = rat2024 - rat2014) %>%
pivot_longer(., cols = c("rat2014", "rat2018", "rat2024"), names_to = "Year", values_to = "ratio")
growth_by_yr <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_wider(names_from = "Year",
values_from = c("native_growth", "gorse_growth", "grass_growth")) %>%
mutate(native_change = native_growth_2024 - native_growth_2014) %>%
mutate(gorse_change = gorse_growth_2024 - gorse_growth_2014) %>%
mutate(grass_change = grass_growth_2024 - grass_growth_2014)
growth_by_yr_vis <- growth_by_yr %>%
select(c("Photopoint", "native_change", "gorse_change", "grass_change")) %>%
pivot_longer(., cols = c("native_change", "gorse_change", "grass_change"),
names_to = "cover_type",
values_to = "change") %>%
mutate(cover_type = str_replace(cover_type, "native_change", "aa_native_change")) %>%
mutate(color = ifelse(change <0, "#8b0000","#006400"))
boxplot_vis_data <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "cover_type",
values_to = "growth") %>%
mutate(cover_type = str_replace(cover_type, "native_growth", "aa_native_growth"))
indvdl_phtpnts <- data %>%
filter(Photopoint %in% c("N","Z","V")) %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth"))
pie_charts <- data %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") %>%
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
N_data <- pie_charts %>%
filter(Photopoint == "N")
Z_data <- pie_charts %>%
filter(Photopoint == "Z")
V_data <- pie_charts %>%
filter(Photopoint == "V")
pie_charts <- data %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") %>%
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
data <- read.csv("real_data.csv") %>%
mutate(Year = as.character(Year)) %>%
mutate(p_veg = p_gorse + p_native) %>%
mutate(grass_to_veg = p_grass/ p_veg) %>%
mutate(native_growth = 100 * p_native / (p_gorse + p_grass + p_native)) %>%
mutate(gorse_growth = 100 * p_gorse / (p_gorse + p_grass + p_native)) %>%
mutate(grass_growth = 100 * p_grass / (p_gorse + p_grass + p_native))
setwd("~/Desktop/r_stuff/Terrestrial Ecology")
data <- read.csv("real_data.csv") %>%
mutate(Year = as.character(Year)) %>%
mutate(p_veg = p_gorse + p_native) %>%
mutate(grass_to_veg = p_grass/ p_veg) %>%
mutate(native_growth = 100 * p_native / (p_gorse + p_grass + p_native)) %>%
mutate(gorse_growth = 100 * p_gorse / (p_gorse + p_grass + p_native)) %>%
mutate(grass_growth = 100 * p_grass / (p_gorse + p_grass + p_native))
vis_data <- data %>%
select(!c("p_unknown")) %>%
pivot_longer(., cols = c("p_native","p_gorse", "p_grass"), names_to = "cover_type", values_to = "pct")
p_chng_native_by_yr <- data %>%
select(c( "Photopoint", "Year", "native_growth")) %>%
pivot_wider(names_from = "Year", names_prefix = "pct_", values_from = "native_growth") %>%
mutate(pct_chng_2018 = 100 * (pct_2018-pct_2014)/pct_2018) %>%
mutate(pct_chng_2024 = 100 * (pct_2024-pct_2018)/pct_2024) %>%
select(c( "Photopoint", "pct_chng_2018", "pct_chng_2024")) %>%
pivot_longer(., cols = c("pct_chng_2018", "pct_chng_2024"), names_to = "Year", values_to = "pct_chng")
grass_to_veg_by_yr <- data %>%
select(c("Photopoint", "Year", "grass_to_veg")) %>%
pivot_wider(names_from = "Year", names_prefix = "rat", values_from = "grass_to_veg") %>%
mutate(change = rat2024 - rat2014) %>%
pivot_longer(., cols = c("rat2014", "rat2018", "rat2024"), names_to = "Year", values_to = "ratio")
growth_by_yr <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_wider(names_from = "Year",
values_from = c("native_growth", "gorse_growth", "grass_growth")) %>%
mutate(native_change = native_growth_2024 - native_growth_2014) %>%
mutate(gorse_change = gorse_growth_2024 - gorse_growth_2014) %>%
mutate(grass_change = grass_growth_2024 - grass_growth_2014)
growth_by_yr_vis <- growth_by_yr %>%
select(c("Photopoint", "native_change", "gorse_change", "grass_change")) %>%
pivot_longer(., cols = c("native_change", "gorse_change", "grass_change"),
names_to = "cover_type",
values_to = "change") %>%
mutate(cover_type = str_replace(cover_type, "native_change", "aa_native_change")) %>%
mutate(color = ifelse(change <0, "#8b0000","#006400"))
boxplot_vis_data <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "cover_type",
values_to = "growth") %>%
mutate(cover_type = str_replace(cover_type, "native_growth", "aa_native_growth"))
indvdl_phtpnts <- data %>%
filter(Photopoint %in% c("N","Z","V")) %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth"))
pie_charts <- data %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") %>%
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
N_data <- pie_charts %>%
filter(Photopoint == "N")
Z_data <- pie_charts %>%
filter(Photopoint == "Z")
V_data <- pie_charts %>%
filter(Photopoint == "V")
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top") +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top",
legend.title = element_text(size = 20, face = "bold")) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top",
legend.title = element_text(face = "bold")) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1, color = "#666666") +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top",
legend.title = element_text(face = "bold")) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1, color = "#aaaaaa") +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top",
legend.title = element_text(face = "bold")) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1, color = "#000000") +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top",
legend.title = element_text(face = "bold")) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1, color = "#000000") +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top",
legend.title = element_text(face = "bold")
legend.text = element_text(size = 10)) +
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1, color = "#000000") +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10)) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
View(vis_data)
data <- read.csv("real_data.csv") %>%
mutate(Year = as.character(Year)) %>%
mutate(p_veg = p_gorse + p_native) %>%
mutate(grass_to_veg = p_grass/ p_veg) %>%
mutate(native_growth = 100 * p_native / (p_gorse + p_grass + p_native)) %>%
mutate(gorse_growth = 100 * p_gorse / (p_gorse + p_grass + p_native)) %>%
mutate(grass_growth = 100 * p_grass / (p_gorse + p_grass + p_native))
vis_data <- data %>%
select(!c("p_unknown")) %>%
pivot_longer(., cols = c("native_growth","gorse_growth", "grass_growth"), names_to = "cover_type", values_to = "pct")
p_chng_native_by_yr <- data %>%
select(c( "Photopoint", "Year", "native_growth")) %>%
pivot_wider(names_from = "Year", names_prefix = "pct_", values_from = "native_growth") %>%
mutate(pct_chng_2018 = 100 * (pct_2018-pct_2014)/pct_2018) %>%
mutate(pct_chng_2024 = 100 * (pct_2024-pct_2018)/pct_2024) %>%
select(c( "Photopoint", "pct_chng_2018", "pct_chng_2024")) %>%
pivot_longer(., cols = c("pct_chng_2018", "pct_chng_2024"), names_to = "Year", values_to = "pct_chng")
grass_to_veg_by_yr <- data %>%
select(c("Photopoint", "Year", "grass_to_veg")) %>%
pivot_wider(names_from = "Year", names_prefix = "rat", values_from = "grass_to_veg") %>%
mutate(change = rat2024 - rat2014) %>%
pivot_longer(., cols = c("rat2014", "rat2018", "rat2024"), names_to = "Year", values_to = "ratio")
growth_by_yr <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_wider(names_from = "Year",
values_from = c("native_growth", "gorse_growth", "grass_growth")) %>%
mutate(native_change = native_growth_2024 - native_growth_2014) %>%
mutate(gorse_change = gorse_growth_2024 - gorse_growth_2014) %>%
mutate(grass_change = grass_growth_2024 - grass_growth_2014)
growth_by_yr_vis <- growth_by_yr %>%
select(c("Photopoint", "native_change", "gorse_change", "grass_change")) %>%
pivot_longer(., cols = c("native_change", "gorse_change", "grass_change"),
names_to = "cover_type",
values_to = "change") %>%
mutate(cover_type = str_replace(cover_type, "native_change", "aa_native_change")) %>%
mutate(color = ifelse(change <0, "#8b0000","#006400"))
boxplot_vis_data <- data %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth")) %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "cover_type",
values_to = "growth") %>%
mutate(cover_type = str_replace(cover_type, "native_growth", "aa_native_growth"))
indvdl_phtpnts <- data %>%
filter(Photopoint %in% c("N","Z","V")) %>%
select(c("Photopoint", "Year", "native_growth", "gorse_growth", "grass_growth"))
pie_charts <- data %>%
pivot_longer(., cols = c("native_growth", "gorse_growth", "grass_growth"),
names_to = "type",
values_to = "pct") %>%
mutate(type = str_replace(type, "native_growth", "aa_native_growth"))
N_data <- pie_charts %>%
filter(Photopoint == "N")
Z_data <- pie_charts %>%
filter(Photopoint == "Z")
V_data <- pie_charts %>%
filter(Photopoint == "V")
#stacked by year
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
geom_bar(position="fill", stat="identity")  +
labs(title = "Land Cover Types at Panama Rock Geopark",
y = "Percent",
x = "Year") +
scale_fill_discrete(name = "Cover Type", labels = c("Gorse", "Grass", "Native"))
#faceted by year
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
geom_bar(position="dodge", stat="identity")
#by photopoint
ggplot(data = data, aes(fill = Year,
y = p_native,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity")
#pct change
ggplot(data = p_chng_native_by_yr, aes(fill = Year,
y = pct_chng,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity")
#grass to veg
ggplot(data = grass_to_veg_by_yr, aes(y = change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity")
#means
means <- ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data = mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 25, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18)) +
stat_summary(fun.data = mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#666666",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
#means <-
ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data = mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 25, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18)) +
stat_summary(fun.data = mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#666666",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
#means
means <- ggplot(data = vis_data, aes(fill = cover_type,
y = pct,
x = Year)) +
stat_summary(fun.data = mean_sdl,
geom ="bar",
position = position_dodge(width=0.95)) +
labs(title = "Land cover makeup at Panama Rock Geopark",
y = "Mean Percent",
x = "Year") +
theme(plot.title = element_text(size = 25, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18)) +
stat_summary(fun.data = mean_cl_boot,
geom = "errorbar",
width = 0.2,
color = "#666666",
position = position_dodge(width=0.95)) +
scale_fill_manual(name = "Cover Type",
labels = c("Gorse", "Grass", "Native"),
values = c("#fde725", "#21918c", "#440154"))
ggsave('means.png', means, bg='transparent')
#native change by photopoint
ggplot(data = growth_by_yr, aes(y = native_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in native cover") +
labs(title = "Difference in native cover between 2014 and 2024")
#native growth by year
ggplot(data = data, aes(y = native_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent native") +
labs(title = "Native canopy cover by year")
#gorse change by photopoint
ggplot(data = growth_by_yr, aes(y = gorse_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in gorse cover") +
labs(title = "Difference in gorse cover between 2014 and 2024")
#gorse growth by year
ggplot(data = data, aes(y = gorse_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent gorse") +
labs(title = "Gorse cover by year")
#grass change by photopoint
ggplot(data = growth_by_yr, aes(y = grass_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in grass cover") +
labs(title = "Difference in grass cover between 2014 and 2024")
#grass growth by year
ggplot(data = data, aes(y = grass_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent grass") +
labs(title = "Grass cover by year")
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
manuscript_plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#832bbd", "#23898e", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('manuscript_plot.png', manuscript_plot, bg='transparent')
#change by photopoint
change_facet_names <- c(`aa_native_change` = "Native",
`gorse_change` = "Gorse",
`grass_change` = "Grass")
ggplot(data = growth_by_yr_vis, aes(y = change,
x = Photopoint,
fill = color)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(change_facet_names)) +
scale_fill_identity(guide = FALSE) +
scale_y_continuous(name = "Difference in percent cover") +
labs(title = "Difference in percent cover between 2024 and 2014")
#N
#N_pie <-
ggplot(N_data, aes(x = "", y = pct, fill = type)) +
geom_bar(stat = "identity", width = 1, color = "#000000") +
coord_polar("y", start = 0) +
facet_wrap(.~Year) +
theme_void() +
theme(legend.position="top",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10)) +
scale_fill_manual(values = c("#440154", "#21918c", "#fde725"),
name = "Cover Type",
labels = c('Native','Gorse', 'Grass')) +
labs(title = "N")
means <- vis_data %>%
group_by(Year, cover_type) %>%
summarise(mean = mean(pct))
write_xlsx(means, "means.xlsx")
View(p_chng_native_by_yr)
growth_by_yr_vis <- growth_by_yr %>%
select(c("Photopoint", "native_change", "gorse_change", "grass_change")) %>%
pivot_longer(., cols = c("native_change", "gorse_change", "grass_change"),
names_to = "cover_type",
values_to = "change") %>%
mutate(cover_type = str_replace(cover_type, "native_change", "aa_native_change")) %>%
mutate(color = ifelse(change <0, "#8b0000","#006400"))
View(growth_by_yr)
View(growth_by_yr)
#native change by photopoint
ggplot(data = growth_by_yr, aes(y = native_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in native cover") +
labs(title = "Difference in native cover between 2014 and 2024")
library(tidyverse)
library(Hmisc)
#by photopoint
ggplot(data = data, aes(fill = Year,
y = p_native,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity")
#native change by photopoint
ggplot(data = growth_by_yr, aes(y = native_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in native cover") +
labs(title = "Difference in native cover between 2014 and 2024")
#native growth by year
ggplot(data = data, aes(y = native_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent native") +
labs(title = "Native canopy cover by year")
#gorse change by photopoint
ggplot(data = growth_by_yr, aes(y = gorse_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in gorse cover") +
labs(title = "Difference in gorse cover between 2014 and 2024")
#gorse growth by year
ggplot(data = data, aes(y = gorse_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent gorse") +
labs(title = "Gorse cover by year")
#grass change by photopoint
ggplot(data = growth_by_yr, aes(y = grass_change,
x = Photopoint)) +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(name = "Difference in grass cover") +
labs(title = "Difference in grass cover between 2014 and 2024")
#grass growth by year
ggplot(data = data, aes(y = grass_growth,
x = Year)) +
geom_boxplot() +
scale_x_discrete(labels = c("2014", "2018", "2024")) +
scale_y_continuous(name = "Percent grass") +
labs(title = "Grass cover by year")
#FACETED PLOTS
#box
box_facet_names <- c(`aa_native_growth` = "Native",
`gorse_growth` = "Gorse",
`grass_growth` = "Grass")
plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(color="#1d3b10ff", alpha = 0.7, linewidth = 1) +
scale_fill_viridis_d() +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(fill = "#dde9d9ff",
colour = "#dde9d9ff",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "#6aa84fff"),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
colour = "#6aa84fff"),
strip.background = element_rect(fill="#b8d3acff"),
plot.background = element_rect(fill='transparent', color=NA))
manuscript_plot <- ggplot(data = boxplot_vis_data, aes(y = growth,
x = Year,
fill = cover_type)) +
geom_boxplot(linewidth = 0.7) +
scale_fill_manual(values = c("#832bbd", "#23898e", "#fde725")) +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(box_facet_names)) +
scale_y_continuous(name = "Percent Cover") +
labs(title = "Percent cover by year") +
theme(title = element_blank(),
strip.text.x = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),,
legend.position = "none",
panel.background = element_rect(size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid'),
panel.grid.minor = element_line(size = 0.15, linetype = 'solid'),
plot.background = element_rect(fill='transparent', color=NA))
ggsave('manuscript_plot.png', manuscript_plot, bg='transparent')
#change by photopoint
change_facet_names <- c(`aa_native_change` = "Native",
`gorse_change` = "Gorse",
`grass_change` = "Grass")
ggplot(data = growth_by_yr_vis, aes(y = change,
x = Photopoint,
fill = color)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~cover_type,
scales = "fixed",
labeller = as_labeller(change_facet_names)) +
scale_fill_identity(guide = FALSE) +
scale_y_continuous(name = "Difference in percent cover") +
labs(title = "Difference in percent cover between 2024 and 2014")
parcel_data <- read.csv("./moosBoarderInteriorParcels.csv")
setwd("~/Desktop/r_stuff/ACRCP")
parcel_data <- read.csv("./moosBoarderInteriorParcels.csv")
View(parcel_data)
library(tidyverse)
owner_data <- parcel_data %>%
subset(is.na(OWNER1) && is.na(OWNER2))
owner_data <- parcel_data %>%
subset(is.na(OWNER1))
owner_data <- parcel_data %>%
subset(OWNER1 = "")
owner_data <- parcel_data %>%
subset(OWNER1 == "")
owner_data <- parcel_data %>%
subset(OWNER1 == "" && OWNER2 == "")
owner_data <- parcel_data %>%
subset(OWNER1 == "" & OWNER2 == "")
owner_data <- parcel_data %>%
subset(OWNER1 != "" & OWNER2 != "")
owner_data <- parcel_data %>%
subset(OWNER1 != "")
owner_data <- parcel_data %>%
subset(OWNER1 != "" | OWNER2 != "")
owner_data <- parcel_data %>%
subset(OWNER1 != "" && OWNER2 != "")
owner_data <- parcel_data %>%
subset(OWNER1 != "" & OWNER2 != "")
owner_data <- parcel_data %>%
subset(!(OWNER1 == "" & OWNER2 == ""))
View(owner_data)
View(owner_data)
owner_data <- parcel_data %>%
subset(!(OWNER1 == "" & OWNER2 == "")) %>%
subset(OWNER1 == Owner.Name)
owner_data <- parcel_data %>%
subset(!(OWNER1 == "" & OWNER2 == "")) %>%
select(SPAN,PARCID,PROPTYPE,YEAR,TNAME,Mailing.Ad,Mailing._1,Mailing._2,Mailing._3,Mailing._4,Category..,Emergency)
View(owner_data)
library("writexl")
parcel_data <- read.csv("./moosBoarderInteriorParcels.csv")
owner_data <- parcel_data %>%
subset(!(OWNER1 == "" & OWNER2 == "")) %>%
select(SPAN,PARCID,PROPTYPE,YEAR,TNAME,Mailing.Ad,Mailing._1,Mailing._2,Mailing._3,Mailing._4,Category..,Emergency)
write_xlsx(owner_data, "owner_data.xlsx")
library(tidyverse)
library("writexl")
parcel_data <- read.csv("./moosBoarderInteriorParcels.csv")
owner_data <- parcel_data %>%
subset(!(OWNER1 == "" & OWNER2 == "")) %>%
select(SPAN,PARCID,PROPTYPE,YEAR,TNAME,OWNER1,OWNER2,Mailing.Ad,Mailing._1,Mailing._2,Mailing._3,Mailing._4,Category..,Emergency)
write_xlsx(owner_data, "owner_data.xlsx")
setwd("~/Desktop/r_stuff/ACRPC")
data <- xmlParse("/Moos.tif.xml")
library("XML")
install.packages("XML")
library("XML")
data <- xmlParse("/Moos.tif.xml")
library("XML")
data <- xmlParse("/Moos.tif.xml")
install.packages("xml2")
library("xml2")
data <- xml_read("/Moos.tif.xml")
library("xml2")
library("XML")
data <- read_xml("/Moos.tif.xml")
data <- read_xml("Moos.tif.xml")
View(data)
xml_child(data, 1)
data
data <- read_xml("Moos.tif.xml")
data <- read_xml("Moos.tif.xml")
new_dara <- xmlParse(data)
library("xml2")
library("XML")
data <- read_xml("Moos.tif.xml")
new_data <- xmlParse(data)
new_data
library("xml2")
library("XML")
data <- read_xml("Moos.tif.xml")
new_data <- xmlParse(data)
xml_structure(new_data)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
install.packages("kableExtra")
install.packages("acs")
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(acs)
# Replace 'your_api_key_here' with your actual Census API key
api.key.install(key = "07e39325ea3565d56f87aad6712ed5703aa4df38")
# Replace 'your_api_key_here' with your actual Census API key
api.key.install(key = "07e39325ea3565d56f87aad6712ed5703aa4df38")
# Define the geographic region (Connecticut)
connecticut <- geo.make(state = "CT")
# Define a list of ACS variables to pull
# These codes correspond to:
# B19013_001: Median Household Income
# B15003_022: Bachelor's Degree
# B23025_004: Employed
# B01002_001: Median Age
# B25077_001: Median Home Value
vars <- c("B19013_001", # Median household income
"B15003_022", # Bachelor's degree
"B23025_004", # Employed
"B01002_001", # Median age
"B25077_001") # Median home value
View(connecticut)
# Fetch data for the defined variables
acs_data <- acs.fetch(geo = connecticut, variable = vars, endyear = 2021, span = 5)
# Replace 'your_api_key_here' with your actual Census API key
api.key.install(key = "07e39325ea3565d56f87aad6712ed5703aa4df38")
# Fetch data for the defined variables
acs_data <- acs.fetch(geo = connecticut, variable = "B19013_001", endyear = 2021, span = 5)
View(connecticut)
library(acs)
# Search for available tables related to income
income_tables <- acs.lookup(table.name = "income", endyear = 2021, span = 5)
head(income_tables)
# Search for available tables related to education, employment, etc.
education_tables <- acs.lookup(table.name = "educational attainment", endyear = 2021, span = 5)
employment_tables <- acs.lookup(table.name = "employment", endyear = 2021, span = 5)
# Print to verify variable codes
print(income_tables)
View(connecticut)
library(acs)
# Search for available tables related to income
income_tables <- acs.lookup(table.name = "Income", endyear = 2021, span = 5)
head(income_tables)
# Print to verify variable codes
print(income_tables)
View(income_tables)
# Fetch data for the defined variables
acs_data <- acs.fetch(geo = connecticut, variable = "Income", endyear = 2021, span = 5)
# Define the geographic region (Connecticut)
connecticut <- geo.make(state = "09")
# Define a list of ACS variables to pull
# These codes correspond to:
# B19013_001: Median Household Income
# B15003_022: Bachelor's Degree
# B23025_004: Employed
# B01002_001: Median Age
# B25077_001: Median Home Value
vars <- c("B19013_001", # Median household income
"B15003_022", # Bachelor's degree
"B23025_004", # Employed
"B01002_001", # Median age
"B25077_001") # Median home value
View(connecticut)
# Define the geographic region (Connecticut)
connecticut <- geo.make(state = "CT")
# Define a list of ACS variables to pull
# These codes correspond to:
# B19013_001: Median Household Income
# B15003_022: Bachelor's Degree
# B23025_004: Employed
# B01002_001: Median Age
# B25077_001: Median Home Value
vars <- c("B19013_001", # Median household income
"B15003_022", # Bachelor's degree
"B23025_004", # Employed
"B01002_001", # Median age
"B25077_001") # Median home value
# Fetch data for the defined variables
acs_data <- acs.fetch(geography = connecticut, variable = "Income", endyear = 2021, span = 5)
geo.length
connecticuit.length
connectict.length
connecticut.length
View(connecticut)
length(in.data)
View(connecticut)
api.key.install(key = "07e39325ea3565d56f87aad6712ed5703aa4df38")
# Fetch data for the defined variables
acs_data <- acs.fetch(geography = connecticut, variable = "Income", endyear = 2021, span = 5)
api.key.install(key = "07e39325ea3565d56f87aad6712ed5703aa4df38")
# Fetch data for the defined variables
acs_data <- acs.fetch(geography = connecticut, variable = "Income", endyear = 2021, span = 5, key = "07e39325ea3565d56f87aad6712ed5703aa4df38")
api.key.install(key = "07e39325ea3565d56f87aad6712ed5703aa4df38")
# Fetch data for the defined variables
acs_data <- acs.fetch(geography = geo.make(state = "CT"), variable = "Income", endyear = 2021, span = 5)
api.key.install(key = "07e39325ea3565d56f87aad6712ed5703aa4df38")
# Fetch data for the defined variables
acs_data <- acs.fetch(geography = geo.make(state = "CT"), variable = "Income", endyear = 2022, span = 5)
install.packages("tidycensus")
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus)
# Set up the API key (replace 'your_api_key_here' with your actual key)
census_api_key("07e39325ea3565d56f87aad6712ed5703aa4df38", install = TRUE)
# Reload R session if needed to apply the key
# Define variables for the analysis
variables <- c(
median_income = "B19013_001",        # Median household income
bachelors_degree = "B15003_022",     # Bachelor's degree (count)
employed = "B23025_004",             # Employed population (count)
median_age = "B01002_001",           # Median age
median_home_value = "B25077_001"     # Median home value
)
# Download ACS data for Connecticut
acs_data <- get_acs(
geography = "state",            # State-level data
state = "CT",                   # Connecticut
variables = variables,          # Variables of interest
year = 2021,                    # ACS year
survey = "acs5",                # 5-year ACS estimates
output = "wide"                 # Wide format for easier analysis
)
# Preview the data
print(acs_data)
View(acs_data)
# Define variables for the analysis
variables <- c(
median_income = "B19013_001",        # Median household income
bachelors_degree = "B15003_022",     # Bachelor's degree (count)
employed = "B23025_004",             # Employed population (count)
median_age = "B01002_001",           # Median age
median_home_value = "B25077_001"     # Median home value
)
# Download ACS data for Connecticut
acs_data <- get_acs(
geography = "state",            # State-level data
state = "CT",                   # Connecticut
variables = variables,          # Variables of interest
year = 2021,                    # ACS year
survey = "acs5",                # 5-year ACS estimates
output = "long"                 # Wide format for easier analysis
)
View(acs_data)
# Define variables for the analysis
variables <- c(
median_income = "B19013_001",        # Median household income
bachelors_degree = "B15003_022",     # Bachelor's degree (count)
employed = "B23025_004",             # Employed population (count)
median_age = "B01002_001",           # Median age
median_home_value = "B25077_001"     # Median home value
)
# Download ACS data for Connecticut
acs_data <- get_acs(
geography = "state",            # State-level data
state = "CT",                   # Connecticut
variables = variables,          # Variables of interest
year = 2021,                    # ACS year
survey = "acs5",                # 5-year ACS estimates
output = "wide"                 # Wide format for easier analysis
)
# Preview the data
print(acs_data)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus)
# Define variables for the analysis
variables <- c(
median_income = "B19013_001",        # Median household income
bachelors_degree = "B15003_022",     # Bachelor's degree (count)
employed = "B23025_004",             # Employed population (count)
median_age = "B01002_001",           # Median age
median_home_value = "B25077_001"     # Median home value
)
# Download ACS data for Connecticut
acs_data <- get_acs(
geography = "state",            # State-level data
state = "CT",                   # Connecticut
variables = variables,          # Variables of interest
year = 2021,                    # ACS year
survey = "acs5",                # 5-year ACS estimates
output = "wide"                 # Wide format for easier analysis
)
# Preview the data
print(acs_data)
View(acs_data)
# Define the variables of interest
variables <- c(
median_income = "B19013_001",        # Median household income
bachelors_degree = "B15003_022",     # Bachelor's degree (count)
employed = "B23025_004",             # Employed population (count)
median_age = "B01002_001",           # Median age
median_home_value = "B25077_001"     # Median home value
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Preview the data
head(acs_tract_data)
View(acs_tract_data)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, ends_with("E")) %>%  # Select only estimate columns
rename_with(~str_replace(.x, "_E", ""), ends_with("E")) %>%  # Clean column names
mutate(
median_income = as.numeric(median_income),
bachelors_degree = as.numeric(bachelors_degree),
employed = as.numeric(employed),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value)
)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, ends_with("E"))
mutate(
median_income = as.numeric(median_incomeE),
bachelors_degree = as.numeric(bachelors_degreeE),
employed = as.numeric(employedE),
median_age = as.numeric(median_ageE),
median_home_value = as.numeric(median_home_valueE)
)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$'))
mutate(
median_income = as.numeric(median_incomeE),
bachelors_degree = as.numeric(bachelors_degreeE),
employed = as.numeric(employedE),
median_age = as.numeric(median_ageE),
median_home_value = as.numeric(median_home_valueE)
)
View(acs_clean_tract)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
mutate(
median_income = as.numeric(median_incomeE),
bachelors_degree = as.numeric(bachelors_degreeE),
employed = as.numeric(employedE),
median_age = as.numeric(median_ageE),
median_home_value = as.numeric(median_home_valueE)
)
# View the cleaned data
glimpse(acs_clean_tract)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "_E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
bachelors_degree = as.numeric(bachelors_degree),
employed = as.numeric(employed),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value)
)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "_E", ""), matches('E$')) ##%>%
mutate(
median_income = as.numeric(median_income),
bachelors_degree = as.numeric(bachelors_degree),
employed = as.numeric(employed),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value)
)
View(acs_clean_tract)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) ##%>%
mutate(
median_income = as.numeric(median_income),
bachelors_degree = as.numeric(bachelors_degree),
employed = as.numeric(employed),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value)
)
View(acs_clean_tract)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
bachelors_degree = as.numeric(bachelors_degree),
employed = as.numeric(employed),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value)
)
# View the cleaned data
glimpse(acs_clean_tract)
# Download Connecticut shape file (tracts) and merge with ACS data
ct_tracts <- get_acs(
geography = "tract",
state = "CT",
variables = "B19013_001",  # Median income
geometry = TRUE            # Download with geometry for mapping
)
# Plot the map
ggplot(ct_tracts) +
geom_sf(aes(fill = estimate), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
# Define the variables of interest
variables <- c(
median_income = "B19013_001",
bachelors_degree = "B15003_022",
employed = "B23025_004",
median_age = "B01002_001",
median_home_value = "B25077_001",
population = "B01003_001"
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Preview the data
head(acs_tract_data)
# Define the variables of interest
variables <- c(
median_income = "B19013_001",         # Median household income
bachelors_degree = "B15003_022",      # Bachelor's degree (count)
employed = "B23025_004",              # Employed population (count)
median_age = "B01002_001",            # Median age
median_home_value = "B25077_001",     # Median home value
total_population = "B01003_001",      # Total population
white_population = "B03002_003",      # White alone (not Hispanic or Latino)
black_population = "B03002_004",      # Black or African American alone
hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
asian_population = "B03002_006",      # Asian alone
other_population = "B03002_009"       # Some other race alone
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Preview the data
head(acs_tract_data)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
bachelors_degree = as.numeric(bachelors_degree),
employed = as.numeric(employed),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population)
)
# View the cleaned data
glimpse(acs_clean_tract)
View(acs_clean_tract)
model <- lm(median_income ~ percent_minority + bachelors_degree + employed + median_age + median_home_value, data = acs_clean_tract)
# Summary of the model
summary(model)
ggpairs(model)
packages.install("GGally")
install.packages("GGally")
ggpairs(model)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus)
library(GGally)
ggpairs(model)
ggpairs(acs_clean_tract)
View(ct_tracts)
View(acs_clean_tract)
acs_clean_tract %>%
select(percent_minority, bachelors_degree,
employed, median_age, median_home_value) %>%
ggpairs()
vif(model)
install.packages("car")
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus)
library(GGally)
library(car)
acs_clean_tract %>%
select(percent_minority, bachelors_degree,
employed, median_age, median_home_value) %>%
ggpairs()
vif(model)
vif(model) %>%
summary()
vif(model)
write_csv(acs_clean_tract, "connecticut_tract_data.csv")
write.csv(acs_clean_tract, "connecticut_tract_data.csv")
write.csv(acs_clean_tract, "connecticut_tract_data.csv")
acs_clean_tract <- read.csv("connecticut_tract_data.csv")
write.csv(acs_clean_tract, "connecticut_tract_data.csv")
acs_clean_tract <- read.csv("connecticut_tract_data.csv")
acs_clean_tract <- read.csv("connecticut_tract_data.csv")
# Download Connecticut shape file (tracts) and merge with ACS data
ct_tracts <- get_acs(
geography = "tract",
state = "CT",
variables = "B19013_001",  # Median income
geometry = TRUE            # Download with geometry for mapping
)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus)
library(GGally)
library(car)
# Set up the API key (replace 'your_api_key_here' with your actual key)
census_api_key("07e39325ea3565d56f87aad6712ed5703aa4df38", install = TRUE)
# Download Connecticut shape file (tracts) and merge with ACS data
ct_tracts <- get_acs(
geography = "tract",
state = "CT",
variables = "B19013_001",  # Median income
geometry = TRUE            # Download with geometry for mapping
)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus)
library(GGally)
library(car)
# Download Connecticut shape file (tracts) and merge with ACS data
ct_tracts <- get_acs(
geography = "tract",
state = "CT",
variables = "B19013_001",  # Median income
geometry = TRUE            # Download with geometry for mapping
)
# Set up the API key (replace 'your_api_key_here' with your actual key)
census_api_key("07e39325ea3565d56f87aad6712ed5703aa4df38", install = TRUE)
# Set up the API key (replace 'your_api_key_here' with your actual key)
census_api_key("07e39325ea3565d56f87aad6712ed5703aa4df38")
# Reload R session if needed to apply the key
# Download Connecticut shape file (tracts) and merge with ACS data
ct_tracts <- get_acs(
geography = "tract",
state = "CT",
variables = "B19013_001",  # Median income
geometry = TRUE            # Download with geometry for mapping
)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus)
library(GGally)
library(car)
# Set up the API key (replace 'your_api_key_here' with your actual key)
census_api_key("07e39325ea3565d56f87aad6712ed5703aa4df38")
# Reload R session if needed to apply the key
# # Define the variables of interest
# variables <- c(
#   median_income = "B19013_001",         # Median household income
#   bachelors_degree = "B15003_022",      # Bachelor's degree (count)
#   employed = "B23025_004",              # Employed population (count)
#   median_age = "B01002_001",            # Median age
#   median_home_value = "B25077_001",     # Median home value
#   total_population = "B01003_001",      # Total population
#   white_population = "B03002_003",      # White alone (not Hispanic or Latino)
#   black_population = "B03002_004",      # Black or African American alone
#   hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
#   asian_population = "B03002_006",      # Asian alone
#   other_population = "B03002_009"       # Some other race alone
# )
#
# # Download ACS data for all tracts in Connecticut
# acs_tract_data <- get_acs(
#   geography = "tract",                  # Tract-level data
#   state = "CT",                         # Connecticut
#   variables = variables,                # Variables of interest
#   year = 2021,                          # ACS year
#   survey = "acs5",                      # 5-year ACS estimates
#   output = "wide"                       # Wide format for easier analysis
# )
#
# # Preview the data
# head(acs_tract_data)
# # Clean and explore the data
# acs_clean_tract <- acs_tract_data %>%
#   select(GEOID, NAME, matches('E$')) %>%
#   rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
#   mutate(
#     median_income = as.numeric(median_income),
#     bachelors_degree = as.numeric(bachelors_degree),
#     employed = as.numeric(employed),
#     median_age = as.numeric(median_age),
#     median_home_value = as.numeric(median_home_value),
#     total_population = as.numeric(total_population),
#     white_population = as.numeric(white_population),
#     percent_minority = 100 * (1 - white_population / total_population)
#   )
#
# # View the cleaned data
# glimpse(acs_clean_tract)
# # Download Connecticut shape file (tracts) and merge with ACS data
# ct_tracts <- get_acs(
#   geography = "tract",
#   state = "CT",
#   variables = "B19013_001",  # Median income
#   geometry = TRUE            # Download with geometry for mapping
# )
#write.csv(acs_clean_tract, "connecticut_tract_data.csv")
acs_clean_tract <- read.csv("connecticut_tract_data.csv")
# # Plot the map
# ggplot(ct_tracts) +
#   geom_sf(aes(fill = estimate), color = NA) +
#   scale_fill_viridis_c(option = "magma") +
#   labs(title = "Median Household Income by Census Tract in Connecticut",
#        fill = "Median Income")
model <- lm(median_income ~ percent_minority + bachelors_degree + employed + median_age + median_home_value, data = acs_clean_tract)
# Summary of the model
summary(model)
acs_clean_tract %>%
select(percent_minority, bachelors_degree,
employed, median_age, median_home_value) %>%
ggpairs()
vif(model)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus)
library(GGally)
library(car)
# Set up the API key (replace 'your_api_key_here' with your actual key)
census_api_key("07e39325ea3565d56f87aad6712ed5703aa4df38")
# Reload R session if needed to apply the key
# Define the variables of interest
variables <- c(
median_income = "B19013_001",         # Median household income
bachelors_degree = "B15003_022",      # Bachelor's degree (count)
employed = "B23025_004",              # Employed population (count)
median_age = "B01002_001",            # Median age
median_home_value = "B25077_001",     # Median home value
total_population = "B01003_001",      # Total population
white_population = "B03002_003",      # White alone (not Hispanic or Latino)
black_population = "B03002_004",      # Black or African American alone
hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
asian_population = "B03002_006",      # Asian alone
other_population = "B03002_009"       # Some other race alone
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Set up the API key (replace 'your_api_key_here' with your actual key)
census_api_key("07e39325ea3565d56f87aad6712ed5703aa4df38", overwrite = T, install = T)
# Reload R session if needed to apply the key
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_API_KEY")
# Define the variables of interest
variables <- c(
median_income = "B19013_001",         # Median household income
bachelors_degree = "B15003_022",      # Bachelor's degree (count)
employed = "B23025_004",              # Employed population (count)
median_age = "B01002_001",            # Median age
median_home_value = "B25077_001",     # Median home value
total_population = "B01003_001",      # Total population
white_population = "B03002_003",      # White alone (not Hispanic or Latino)
black_population = "B03002_004",      # Black or African American alone
hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
asian_population = "B03002_006",      # Asian alone
other_population = "B03002_009"       # Some other race alone
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Define the variables of interest
variables <- c(
median_income = "B19013_001",         # Median household income
bachelors_degree = "B15003_022",      # Bachelor's degree (count)
employed = "B23025_004",              # Employed population (count)
median_age = "B01002_001",            # Median age
median_home_value = "B25077_001",     # Median home value
total_population = "B01003_001",      # Total population
white_population = "B03002_003",      # White alone (not Hispanic or Latino)
black_population = "B03002_004",      # Black or African American alone
hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
asian_population = "B03002_006",      # Asian alone
other_population = "B03002_009"       # Some other race alone
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Define the variables of interest
variables <- c(
median_income = "B19013_001",         # Median household income
bachelors_degree = "B15003_022",      # Bachelor's degree (count)
employed = "B23025_004",              # Employed population (count)
median_age = "B01002_001",            # Median age
median_home_value = "B25077_001",     # Median home value
total_population = "B01003_001",      # Total population
white_population = "B03002_003",      # White alone (not Hispanic or Latino)
black_population = "B03002_004",      # Black or African American alone
hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
asian_population = "B03002_006",      # Asian alone
other_population = "B03002_009"       # Some other race alone
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Define the variables of interest
variables <- c(
median_income = "B19013_001",         # Median household income
bachelors_degree = "B15003_022",      # Bachelor's degree (count)
employed = "B23025_004",              # Employed population (count)
median_age = "B01002_001",            # Median age
median_home_value = "B25077_001",     # Median home value
total_population = "B01003_001",      # Total population
white_population = "B03002_003",      # White alone (not Hispanic or Latino)
black_population = "B03002_004",      # Black or African American alone
hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
asian_population = "B03002_006",      # Asian alone
other_population = "B03002_009"       # Some other race alone
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Define the variables of interest
variables <- c(
median_income = "B19013_001",         # Median household income
bachelors_degree = "B15003_022",      # Bachelor's degree (count)
employed = "B23025_004",              # Employed population (count)
median_age = "B01002_001",            # Median age
median_home_value = "B25077_001",     # Median home value
total_population = "B01003_001",      # Total population
white_population = "B03002_003",      # White alone (not Hispanic or Latino)
black_population = "B03002_004",      # Black or African American alone
hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
asian_population = "B03002_006",      # Asian alone
other_population = "B03002_009"       # Some other race alone
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Set up the API key (replace 'your_api_key_here' with your actual key)
census_api_key("e0ac8ce2df401382e60adff2bdb0eb5161344fdc", overwrite = T, install = T)
# Reload R session if needed to apply the key
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_API_KEY")
# Define the variables of interest
variables <- c(
median_income = "B19013_001",         # Median household income
bachelors_degree = "B15003_022",      # Bachelor's degree (count)
employed = "B23025_004",              # Employed population (count)
median_age = "B01002_001",            # Median age
median_home_value = "B25077_001",     # Median home value
total_population = "B01003_001",      # Total population
white_population = "B03002_003",      # White alone (not Hispanic or Latino)
black_population = "B03002_004",      # Black or African American alone
hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
asian_population = "B03002_006",      # Asian alone
other_population = "B03002_009"       # Some other race alone
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Define the variables of interest
variables <- c(
median_income = "B19013_001",         # Median household income
bachelors_degree = "B15003_022",      # Bachelor's degree (count)
employed = "B23025_004",              # Employed population (count)
median_age = "B01002_001",            # Median age
median_home_value = "B25077_001",     # Median home value
total_population = "B01003_001",      # Total population
white_population = "B03002_003",      # White alone (not Hispanic or Latino)
black_population = "B03002_004",      # Black or African American alone
hispanic_population = "B03002_012",   # Hispanic or Latino (of any race)
asian_population = "B03002_006",      # Asian alone
other_population = "B03002_009"       # Some other race alone
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide"                       # Wide format for easier analysis
)
# Preview the data
head(acs_tract_data)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
bachelors_degree = as.numeric(bachelors_degree),
employed = as.numeric(employed),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population)
)
# View the cleaned data
glimpse(acs_clean_tract)
# Download Connecticut shape file (tracts) and merge with ACS data
ct_tracts <- get_acs(
geography = "tract",
state = "CT",
variables = "B19013_001",  # Median income
geometry = TRUE            # Download with geometry for mapping
)
write.csv(acs_clean_tract, "connecticut_tract_data.csv")
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
)
# View the cleaned data
glimpse(acs_clean_tract)
# Download Connecticut shape file (tracts) and merge with ACS data
ct_tracts <- get_acs(
geography = "tract",
state = "CT",
variables = "B19013_001",  # Median income
geometry = TRUE            # Download with geometry for mapping
)
write.csv(acs_clean_tract, "connecticut_tract_data.csv")
acs_clean_tract <- read.csv("connecticut_tract_data.csv")
# Plot the map
ggplot(ct_tracts) +
geom_sf(aes(fill = estimate), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
model <- lm(median_income ~ percent_minority + bachelors_degree + employed + median_age + median_home_value, data = acs_clean_tract)
# Summary of the model
summary(model)
acs_clean_tract %>%
select(percent_minority, bachelors_degree,
employed, median_age, median_home_value) %>%
ggpairs()
vif(model)
model <- lm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract)
# Summary of the model
summary(model)
acs_clean_tract %>%
select(percent_minority, bachelors_degree,
employed, median_age, median_home_value) %>%
ggpairs()
acs_clean_tract %>%
select(percent_minority, bachelors_degree,
employed, median_age, log(median_home_value)) %>%
ggpairs()
acs_clean_tract %>%
select(percent_minority, bachelors_degree,
employed, median_age, median_home_value) %>%
mutate(median_home_value = log(median_home_value)) %>%
ggpairs()
vif(model)
install.packages("sf")
View(ct_tracts)
st_write(ct_tracts, shp)
install.packages("rgdal")
library(rgdal)
st_write(ct_tracts, "ct_tracts.shp")
install.packages("shapefiles")
library(shapefiles)
write.shapefile(ct_tracts, "ct_tracts.shp")
write.shp(ct_tracts, "ct_tracts.shp")
View(ct_tracts)
View(ct_tracts)
ct_tracts %>%
select(GEOID, NAME, geometry) %>%
write.shp(., "ct_tracts.shp")
View(ct_tracts[[6]][[880]])
View(ct_tracts[[6]][[880]])
ct_tracts %>%
select(GEOID, NAME, geometry) %>%
subset(length(geometry.type) > 0) %>%
write.shp(., "ct_tracts.shp")
ct_tracts %>%
select(GEOID, NAME, geometry) %>%
subset(length(geometry$type) > 0) %>%
write.shp(., "ct_tracts.shp")
ct_tracts_cleaned <- ct_tracts %>%
select(GEOID, NAME, geometry) %>%
subset(length(geometry$type) > 0) #%>%
#write.shp(., "ct_tracts.shp")
View(ct_tracts_cleaned)
ct_tracts_cleaned <- ct_tracts %>%
select(GEOID, NAME, geometry) %>%
subset(length(geometry$type) == 0) #%>%
#write.shp(., "ct_tracts.shp")
View(ct_tracts_cleaned[[3]][[879]])
ct_tracts_cleaned <- ct_tracts %>%
select(GEOID, NAME, geometry) %>%
subset(length(geometry$Type) == 0) #%>%
#write.shp(., "ct_tracts.shp")
ct_tracts_cleaned <- ct_tracts %>%
select(GEOID, NAME, geometry) %>%
subset(length(geometry.Type) == 0) #%>%
View(ct_tracts_cleaned[[3]][[1]])
st_geometry_type(ct_tracts)
library(sf)
st_geometry_type(ct_tracts)
st_write(ct_tracts, "ct_tracts.shp")
# Plot the map
ggplot(ct_tracts) +
geom_sf(aes(fill = log(estimate)), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
# Plot the map
ggplot(ct_tracts) +
geom_sf(aes(fill = estimate), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
rm(ct_tracts_cleaned)
library(sf)
# Ensure geometry is projected
ct_tracts <- st_transform(ct_tracts, crs = 3857)  # Web
# Plot the map
ggplot(ct_tracts) +
geom_sf(aes(fill = estimate), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
model <- lm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract)
# Summary of the model
summary(model)
library(spdep)
install.packages("spdep")
library(spdep)
# Convert to spatial object
tracts_sf <- as_Spatial(ct_tracts)
library(spdep)
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(tracts_sf)
library(spdep)
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(ct_tracts)
# Delete Empty Geometries
ct_tracts <- ct_tracts %>% filter(!st_is_empty(.))
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(ct_tracts)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
View(ct_tracts)
# Delete Empty Geometries
ct_tracts <- ct_tracts %>% filter(!st_is_empty(.))
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(ct_tracts)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
# Calculate Moran's I for median income
median_income <- ct_tracts$estimate
moran_test <- moran.test(median_income, tract_weights, zero.policy = TRUE)
View(tract_neighbors)
View(tract_weights)
# Plot the map
ggplot(ct_tracts) +
geom_sf(aes(fill = estimate), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
# Delete Empty Geometries
ct_tracts <- ct_tracts %>% filter(!st_is_empty(.))
# Delete rows with no income data
ct_tracts_moran <- ct_tracts %>%
filter(!is.na(estimate))
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(ct_tracts_moran)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
# Calculate Moran's I for median income
median_income <- ct_tracts_moran$estimate
moran_test <- moran.test(median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
acs_clean_tract %>%
select(percent_minority, bachelors_degree,
employed, median_age, median_home_value) %>%
mutate(median_home_value = log(median_home_value)) %>%
ggpairs()
# Delete Empty Geometries
ct_tracts <- ct_tracts %>% filter(!st_is_empty(.))
# Delete rows with no income data
ct_tracts_moran <- ct_tracts %>%
filter(!is.na(estimate))
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(ct_tracts_moran)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
# Calculate Moran's I for median income
median_income <- ct_tracts_moran$estimate
moran_test <- moran.test(median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
slm_result <- lagsarlm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract, listw = tract_weights)
install.packages("spatialreg")
library(spatialreg)
slm_result <- lagsarlm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract, listw = tract_weights)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
) %>%
filter(!is.na(median_income))
# View the cleaned data
glimpse(acs_clean_tract)
slm_result <- lagsarlm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract, listw = tract_weights)
rm(slm_result)
slm_model <- lagsarlm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model)
ols_model <- lm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract)
# summary of the model
summary(ols_model)
sem_model <- errorsarlm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model)
View(tract_weights)
sem_model <- errorsarlm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract, listw = tract_weights(nb))
sem_model <- errorsarlm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract, listw = nb2listw(tract_neighbors))
# summary of the model
summary(sem_model)
sem_model <- errorsarlm(median_income ~ percent_minority + bachelors_degree + employed + median_age + log(median_home_value), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model)
local_moran <- localmoran(acs_clean_tract$median_income, listw = tract_weights)
View(local_moran)
local_moran <- localmoran(acs_clean_tract, listw = tract_weights)
local_moran <- localmoran(acs_clean_tract$median_income, listw = tract_weights)
View(local_moran)
local_moran <- localmoran(acs_clean_tract$median_income, listw = tract_weights) %>% mutate(id = nrow())
View(ct_tracts)
View(acs_tract_data)
View(acs_clean_tract)
# Download Connecticut shape file
ct_tracts <- get_acs(
geography = "tract",
state = "CT",
variables = "B19013_001",  # Median income
geometry = TRUE            # Download with geometry for mapping
)
# Define the variables of interest
variables <- c(
median_income = "B19013_001",
bachelors_degree = "B15003_022",
employed = "B23025_004",
median_age = "B01002_001",
median_home_value = "B25077_001",
total_population = "B01003_001",
white_population = "B03002_003",
black_population = "B03002_004",
hispanic_population = "B03002_012",
asian_population = "B03002_006",
other_population = "B03002_009"
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide",
geometry = TRUE
)
rm(ct_tracts)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
) %>%
filter(!is.na(median_income))
# View the cleaned data
glimpse(acs_clean_tract)
st_write(acs_clean_tract, "ct_tracts.shp")
st_write(acs_clean_tract, "ct_tracts.shp", append=FALSE)
acs_clean_tract <- read.shp("ct_tracts.shp")
View(acs_clean_tract)
acs_clean_tract <- read_shp("ct_tracts.shp")
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
) %>%
filter(!is.na(median_income))
# View the cleaned data
glimpse(acs_clean_tract)
acs_clean_tract <- read_sf("ct_tracts.shp")
View(acs_clean_tract)
View(acs_clean_tract)
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
View(acs_tract_data)
View(acs_clean_tract)
View(acs_clean_tract)
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
# Calculate Moran's I for median income
median_income <- ct_tracts_moran$estimate
moran_test <- moran.test(mdn_ncm, tract_weights, zero.policy = TRUE)
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$mdn_ncm, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
ols_model <- lm(mdn_ncm ~ prcnt_mnrty + bchlrs_dgr + mplyd + mdn_ge + log(mdn_hme_vl), data = acs_clean_tract)
ols_model <- lm(mdn_ncm ~ prcnt_m + bchlrs_ + mplyd + mdn_ge + log(mdn_hme), data = acs_clean_tract)
ols_model <- lm(mdn_ncm ~ prcnt_m + bchlrs_ + employd + mdn_ge + log(mdn_hme), data = acs_clean_tract)
ols_model <- lm(mdn_ncm ~ prcnt_m + bchlrs_ + employd + medin_g + log(mdn_hme), data = acs_clean_tract)
ols_model <- lm(mdn_ncm ~ prcnt_m + bchlrs_ + employd + medin_g + log(mdn_hm_), data = acs_clean_tract)
# summary of the model
summary(ols_model)
slm_model <- lagsarlm(mdn_ncm ~ prcnt_m + bchlrs_ + employd + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model)
sem_model <- errorsarlm(mdn_ncm ~ prcnt_m + bchlrs_ + employd + medin_g + log(mdn_hm_))
sem_model <- errorsarlm(mdn_ncm ~ prcnt_m + bchlrs_ + employd + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model)
ols_model <- lm(mdn_ncm ~ prcnt_m + bchlrs_ + employd + medin_g + log(mdn_hm_), data = acs_clean_tract)
# summary of the model
step(ols_model)
slm_model <- lagsarlm(mdn_ncm ~ prcnt_m + bchlrs_ + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model)
sem_model <- errorsarlm(mdn_ncm ~ prcnt_m + bchlrs_ + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model)
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_) %>%
mutate(mdn_hm_ = log(mdn_hm_)) %>%
ggpairs()
sem_model <- errorsarlm(mdn_ncm ~ prcnt_m + bchlrs_ + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model)
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_) %>%
mutate(mdn_hm_ = log(mdn_hm_)) %>%
ggpairs()
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_, mdn_hm_) %>%
ggpairs()
View(acs_clean_tract)
vif(model)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
area = st_area(geometry),
pop_den = total_population/area
) %>%
filter(!is.na(median_income))
# View the cleaned data
glimpse(acs_clean_tract)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
area = as.numeric(st_area(geometry)),
pop_den = (total_population/area) * 1000000
) %>%
filter(!is.na(median_income))
# View the cleaned data
glimpse(acs_clean_tract)
st_write(acs_clean_tract, "ct_tracts.shp", append=FALSE)
trunc(0.123456789, prec = 4)
trunc(0.123456789, prec = 1)
trunc(0.123456789)
trunc(0.123456789, prec = -5)
trunc(0.123456789, prec = 0.1)
trunc(1.123456789
)
stop()
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
area = trunc(as.numeric(st_area(geometry))*10^4)/10^4,
pop_den = (total_population/area) * 1000000
) %>%
filter(!is.na(median_income))
# View the cleaned data
glimpse(acs_clean_tract)
st_write(acs_clean_tract, "ct_tracts.shp", append=FALSE)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
area = trunc(as.numeric(st_area(geometry)),
pop_den = (total_population/area) * 1000000
) %>%
filter(!is.na(median_income))
# View the cleaned data
glimpse(acs_clean_tract)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
area = trunc(as.numeric(st_area(geometry))),
pop_den = (total_population/area) * 1000000
) %>%
filter(!is.na(median_income))
# View the cleaned data
glimpse(acs_clean_tract)
st_write(acs_clean_tract, "ct_tracts.shp", append=FALSE)
st_write(acs_clean_tract, "ct_tracts.shp", append=FALSE)
acs_clean_tract <- read_sf("ct_tracts.shp")
View(acs_clean_tract)
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
# Plot the map
ggplot(ct_tracts) +
geom_sf(aes(fill = estimate), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
# Plot the map
ggplot(acs_clean_tracts) +
geom_sf(aes(fill = mdn_ncm), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
# Plot the map
ggplot(acs_clean_tract) +
geom_sf(aes(fill = mdn_ncm), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_) %>%
mutate(mdn_hm_ = log(mdn_hm_)) %>%
ggpairs()
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_) %>%
mutate(mdn_hm_ = log(mdn_hm_)) %>%
drop_na() %>%
ggpairs()
pairs <- acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_) %>%
mutate(mdn_hm_ = log(mdn_hm_)) %>%
drop_na()
View(pairs)
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_) %>%
mutate(mdn_hm_ = log(mdn_hm_)) %>%
st_drop_geometry() %>%
ggpairs()
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_, pop_den) %>%
mutate(mdn_hm_ = log(mdn_hm_)) %>%
st_drop_geometry() %>%
ggpairs()
ols_model <- lm(mdn_ncm ~ prcnt_m + bchlrs_ + employd + medin_g + pop_den + log(mdn_hm_), data = acs_clean_tract)
# summary of the model
step(ols_model)
vif(ols_model)
ols_model <- lm(mdn_ncm ~ prcnt_m + bchlrs_ + employd + medin_g + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
# summary of the model
step(ols_model)
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_, pop_den) %>%
mutate(mdn_hm_ = log(mdn_hm_),
pop_den = log(pop_den)) %>%
st_drop_geometry() %>%
ggpairs()
vif(ols_model)
ols_model <- lm(formula = mdn_ncm ~ prcnt_m + bchlrs_ + medin_g + log(pop_den) +
log(mdn_hm_), data = acs_clean_tract)
plot(ols_model, which=1)
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + log(pop_den) +
log(mdn_hm_), data = acs_clean_tract)
plot(ols_model, which=1)
slm_model <- lagsarlm(log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model)
ols_model <- lm(log(mdn_ncm) ~ prcnt_m + bchlrs_ + employd + medin_g + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
# summary of the model
step(ols_model)
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
plot(ols_model, which=1)
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_, pop_den, employd) %>%
mutate(mdn_hm_ = log(mdn_hm_),
pop_den = log(pop_den)) %>%
st_drop_geometry() %>%
ggpairs()
vif(ols_model)
sem_model <- errorsarlm(mdn_ncm ~ prcnt_m + bchlrs_ + medin_g + employd + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model)
slm_model <- lagsarlm(log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model)
step(slm_model)
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd + log(pop_den) , data = acs_clean_tract)
plot(ols_model, which=1)
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
plot(ols_model, which=1)
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd + log(mdn_hm_), data = acs_clean_tract)
plot(ols_model, which=1)
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(pop_dens))) +
geom_point() +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(pop_den))) +
geom_point() +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = pop_den)) +
geom_point() +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = mdn_hm_)) +
geom_point() +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(mdn_hm_))) +
geom_point() +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = 1/(mdn_hm_^2))) +
geom_point() +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(log(mdn_hm_)))) +
geom_point() +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(mdn_hm_))) +
geom_point() +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(mdn_hm_))) +
geom_point() +
geom_smooth(method = "lm")
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(mdn_hm_))) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
library(tidyverse)
library(GGally)
library(broom)
interviews <- read.csv("r_interviews.csv")
interviews <- interviews %>%
mutate(class_year = case_when(
year == "2024.5" ~ 2024,
year == "2025 or 2025.5" ~ 2025,
year == "2026 or 2026.5" ~ 2026,
year == "2027 or 2027.5" ~ 2027,
year == "2028" ~ 2028),
raceWhite = as.factor(if_else(race == "White", 1, 0)),
carAccess = as.factor(if_else(grepl("I have", car, fixed=TRUE), 1, 0)))
interviews %>%
dplyr::select(conection, class_year, raceWhite, carAccess) %>%
ggpairs()
View(interviews)
ggplot(aes(x = as.factor(class_year), y = connection), data = interviews) +
geom_bar()
ggplot(aes(x = as.factor(class_year), y = conection), data = interviews) +
geom_bar()
ggplot(aes(y = as.factor(class_year)), data = interviews) +
geom_bar()
ggplot(aes(x = as.factor(class_year), y = conection), data = interviews) +
geom_boxplot()
ggplot(aes(x = as.factor(class_year), y = conection), data = interviews) +
geom_violin()
ggplot(aes(x = as.factor(class_year), y = conection), data = interviews) +
geom_boxplot()
ggplot(aes(x = as.factor(class_year), y = conection), data = interviews) +
geom_violin()
ggplot(aes(x = raceWhite, y = conection), data = interviews) +
geom_violin()
ggplot(aes(x = raceWhite, y = conection), data = interviews) +
geom_boxplot()
model <- lm(conection ~ raceWhite + carAccess, data = interviews)
summary(model) %>%
tidy()
model <- lm(conection ~ raceWhite + carAccess + as.factor(class_year), data = interviews)
summary(model) %>%
tidy()
interviews <- interviews %>%
mutate(class_year = case_when(
year == "2024.5" ~ 2024,
year == "2025 or 2025.5" ~ 2025,
year == "2026 or 2026.5" ~ 2026,
year == "2027 or 2027.5" ~ 2027,
year == "2028" ~ 2028),
raceWhite = as.factor(if_else(race == "White", 1, 0)),
carAccess = as.factor(if_else(grepl("I have", car, fixed=TRUE), 1, 0)),
upperClassman = as.factor(if_else(class_year >= 2026, 1, 0)))
interviews %>%
dplyr::select(conection, upperClassman, raceWhite, carAccess) %>%
ggpairs()
model <- lm(conection ~ raceWhite + carAccess + , data = interviews)
model <- lm(conection ~ raceWhite + carAccess + upperClassman, data = interviews)
summary(model) %>%
tidy()
model <- lm(conection ~ raceWhite + carAccess + upperClassman, data = interviews)
summary(model) %>%
tidy()
step(model)
model <- lm(conection ~ raceWhite + carAccess + upperClassman + hometown_similarity, data = interviews)
summary(model) %>%
tidy()
step(model)
interviews <- interviews %>%
mutate(class_year = case_when(
year == "2024.5" ~ 2024,
year == "2025 or 2025.5" ~ 2025,
year == "2026 or 2026.5" ~ 2026,
year == "2027 or 2027.5" ~ 2027,
year == "2028" ~ 2028),
raceWhite = as.factor(if_else(race == "White", 1, 0)),
carAccess = as.factor(if_else(grepl("I have", car, fixed=TRUE), 1, 0)),
upperClassman = as.factor(if_else(class_year >= 2026, 1, 0)),
towniesMany = as.factor(if_else(
townies_known %in% c("0", "1-3"), 0, 1)))
model <- lm(conection ~ raceWhite + carAccess + upperClassman + hometown_similarity + towniesMany, data = interviews)
summary(model) %>%
tidy()
step(model)
interviews <- interviews %>%
mutate(class_year = case_when(
year == "2024.5" ~ 2024,
year == "2025 or 2025.5" ~ 2025,
year == "2026 or 2026.5" ~ 2026,
year == "2027 or 2027.5" ~ 2027,
year == "2028" ~ 2028),
raceWhite = as.factor(if_else(race == "White", 1, 0)),
carAccess = as.factor(if_else(grepl("I have", car, fixed=TRUE), 1, 0)),
upperClassman = as.factor(if_else(class_year >= 2026, 1, 0)),
towniesMany = as.factor(if_else(townies_known %in% c("0", "1-3"), 0, 1)),
visitsMany = as.factor(if_else(
town_visit_freq %in% c("Rarely or never", "Once a week"), 0, 1)))
model <- lm(conection ~ raceWhite + carAccess + upperClassman + hometown_similarity + towniesMany + visitsMany, data = interviews)
summary(model) %>%
tidy()
step(model)
model_final <- lm(formula = conection ~ raceWhite + towniesMany, data = interviews)
summary(model_final) %>%
tiddy()
model_final <- lm(formula = conection ~ raceWhite + towniesMany, data = interviews)
summary(model_final) %>%
tidy()
interviews %>%
dplyr::select(conection, raceWhite, towniesMany) %>%
ggpairs()
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus) #for loading census data
library(GGally)     #for ggpairs
library(car)
library(sf)         #for spatial analysis
library(spdep)      #for calculating Moran's I
library(spatialreg) #for implementing spatial lag model
# # Set up the API key (replace 'your_api_key_here' with your actual key)
# census_api_key("e0ac8ce2df401382e60adff2bdb0eb5161344fdc", overwrite = T, install = T)
#
# # Reload R session if needed to apply the key
# readRenviron("~/.Renviron")
#
# Sys.getenv("CENSUS_API_KEY")
# Define the variables of interest
variables <- c(
median_income = "B19013_001",
bachelors_degree = "B15003_022",
employed = "B23025_004",
median_age = "B01002_001",
median_home_value = "B25077_001",
total_population = "B01003_001",
white_population = "B03002_003",
black_population = "B03002_004",
hispanic_population = "B03002_012",
asian_population = "B03002_006",
other_population = "B03002_009"
)
# Download ACS data for all tracts in Connecticut
acs_tract_data <- get_acs(
geography = "tract",                  # Tract-level data
state = "CT",                         # Connecticut
variables = variables,                # Variables of interest
year = 2021,                          # ACS year
survey = "acs5",                      # 5-year ACS estimates
output = "wide",
geometry = TRUE
)
# Clean and explore the data
acs_clean_tract <- acs_tract_data %>%
select(GEOID, NAME, matches('E$')) %>%
rename_with(~str_replace(.x, "E", ""), matches('E$')) %>%
mutate(
median_income = as.numeric(median_income),
median_age = as.numeric(median_age),
median_home_value = as.numeric(median_home_value),
total_population = as.numeric(total_population),
white_population = as.numeric(white_population),
percent_minority = 100 * (1 - white_population / total_population),
bachelors_degree = as.numeric(bachelors_degree) / total_population,
employed = as.numeric(employed) / total_population,
area = trunc(as.numeric(st_area(geometry))),
pop_den = (total_population/area) * 1000000
) %>%
filter(!is.na(median_income))
# View the cleaned data
glimpse(acs_clean_tract)
st_write(acs_clean_tract, "ct_tracts.shp", append=FALSE)
acs_clean_tract <- read_sf("ct_tracts.shp")
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$mdn_ncm, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
# Plot the map
ggplot(acs_clean_tract) +
geom_sf(aes(fill = mdn_ncm), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(mdn_hm_))) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ols_model <- lm(log(mdn_ncm) ~ prcnt_m + bchlrs_ + employd + medin_g + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
# summary of the model
step(ols_model)
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
plot(ols_model, which=1)
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
plot(ols_model, which=1)
summary(ols_model)
slm_model <- lagsarlm(log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model)
library(haven)
library(tidyverse)
library(openxlsx)
library(sf)
library(broom)
library(purrr)
library(glmmTMB)
library(gamlss)
library(haven)
library(tidyverse)
library(openxlsx)
library(sf)
library(broom)
library(purrr)
library(glmmTMB)
library(gamlss)
data_2023 <- read_sav("EHPM 2023.sav")
#ata_2022 <- read_sav("EHPM 2022.sav")
data_2021 <- read_sav("EHPM 2021.sav")
#data_2020 <- read_sav("EHPM 2020.sav")
data_2019 <- read_sav("EHPM 2019.sav") %>%
mutate(r44003a = r44404a,
r44005a = r44406a,
r44108 = r44508)
#data_2018 <- read_sav("EHPM 2018.sav") %>%
#  mutate(idboleta = KEY_HOGAR)
#data_2015 <- read_sav("EHPM 2015.sav") %>%
#  select(!c(codigomunic))
#data_2011_raw <- read_sav("EHPM 2011/BDSEC00.sav")
el_salvador_shp <- st_read("munA_WGS_1984_50.shp")
el_salvador_shp <- el_salvador_shp %>%
mutate(COD_MUN4 = as.double(COD_MUN4)) %>%
filter(!is.na(COD_MUN4))
codes_2021 <- data_2021 %>%
select(correlativo,codigomunic)
codes_2019 <- data_2019 %>%
select(correlativo,codigomunic)
all_codes <- bind_rows(codes_2021, codes_2019)
counties_for_2020 <- all_codes %>%
group_by(correlativo) %>%
summarize(codigomunic = max(codigomunic))
rm(codes_2019, codes_2021, all_codes, counties_for_2020)
data_all_years <- bind_rows(data_2019, data_2021, data_2023)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza, r308c, r44003a, r44005a, r44108) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = if_else(remittance_hh == 1, max(r01b), NA),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = if_else(pobreza > 1, 0, 1),
renter =  if_else(r44003a > 0 | r44005a > 0 | r44108 > 0, 1, 0),
tenant = if_else(r308c > 0, 1, 0)) %>%
ungroup()
remittances_by_municipality <- remittances_by_family %>%
ungroup() %>%
group_by(codigomunic, edicion) %>%
reframe(count = n(),
count_remit = sum(remittance_hh),
prop_remit = mean(remittance_hh),
average_remit = mean(totayuda, na.rm = T),
med_family_income = median(ingfa, na.rm = T),
prop_remit_of_income = mean(prop_remit_of_income,na.rm = T),
average_members_abroad = mean(members_abroad, na.rm = T),
count = n(),
med_income = median(ingfa),
edu_spending = mean(edu_spending, na.rm = T),
percent_in_poverty = mean(poverty, na.rm = T),
remit_burden = prop_remit_of_income*prop_remit,
high_remit_burden = if_else(remit_burden > 0.03203101, 1, 0),
high_percent_poverty = if_else(percent_in_poverty > 0.09482062, 1, 0)) %>%
unique() %>%
ungroup()
years <- c(2019, 2021, 2023)
# Expand the shapefile by duplicating each geometry for each year
expanded_shp <- el_salvador_shp %>%
# Create an additional column with all years for each geometry
slice(rep(1:n(), each = length(years))) %>%
mutate(edicion = rep(years, times = nrow(el_salvador_shp)))
shp_with_data <- left_join(
expanded_shp,
remittances_by_municipality,
by = join_by(COD_MUN4 == codigomunic, edicion),
copy = FALSE,
suffix = c(".x", ".y"),
) %>%
mutate(pop_density = POB_TOTAL/AREA_KM2)
shp_with_data %>%
subset(edicion %in% c(2019, 2021, 2023)) %>%
ggplot(aes(fill = average_members_abroad)) +
geom_sf(lwd = 0.1) +
scale_fill_viridis_c(option = "plasma") +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 3, length.out = 6)) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = edu_spending)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0, 20, length.out = 6)) +
facet_wrap(~edicion)
remittances_by_municipality %>%
subset(edicion %in% c(2018, 2019, 2020, 2021, 2022)) %>%
ggplot(., aes(x = prop_remit_of_income, y = edu_spending)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Remittance Reliance and Education Spending by Municipality", x = "Proportion of income from remittences", y = "Mean monthly education spending")
remittances_by_family %>%
ggplot(., aes(x = as.factor(renter), y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(edicion == 2022) %>%
ungroup() %>%
summarize(mean(remittance_hh))
remittances_by_family %>%
ungroup() %>%
summarize(mean(remittance_hh, na.rm = T))
ggplot(data = shp_with_data, aes(fill = prop_remit_of_income)) +
geom_sf(lwd = 0.1) +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 0.35, length.out = 6), name = "proportion") +
labs(title = "Proportion of Income Coming From Remittances 2019-2023")
remittances_by_family %>%
subset(edicion %in% c(2018, 2019, 2020, 2021, 2022)) %>%
ggplot(., aes(x = prop_remit_of_income, y = edu_spending)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Remittance Reliance and Education Spending by Municipality", x = "Proportion of income from remittences", y = "Mean monthly education spending")
remittances_by_family %>%
ggplot(., aes(x = as.factor(renter), y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_violin() +
facet_wrap(~edicion)
View(remittances_by_family)
ggplot(data = shp_with_data, aes(fill = log(pop_density))) +
geom_sf() +
scale_fill_viridis_c(option = "plasma", name = "") +
labs(title = "Log Transofrmed Population Density 2019 - 2021")
ggplot(shp_with_data, aes(fill = prop_remit)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 0.6, length.out = 6)) +
facet_wrap(~edicion)
View(shp_with_data)
ggplot(data = shp_with_data, aes(fill = log(pop_density), label = COD_MUN)) +
geom_sf() +
scale_fill_viridis_c(option = "plasma", name = "") +
labs(title = "Log Transofrmed Population Density 2019 - 2021") +
geom_sf_text()
ggplot(data = shp_with_data, aes(fill = average_remit)) +
geom_sf(lwd = 0.1) +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 150, length.out = 6))
View(data_2019)
View(data_2021)
View(data_2023)
fit <- remittances_by_municipality %>%
subset(edicion == 2023) %>%
lm(data =., average_members_abroad ~ prop_remit_of_income)
summary(fit) %>%
tidy()
fit <- remittances_by_municipality %>%
subset(edicion == 2019) %>%
lm(data =., average_members_abroad ~ prop_remit_of_income)
summary(fit) %>%
tidy()
remittances_by_municipality %>%
subset(edicion %in% c(2015, 2018, 2019, 2020, 2021, 2022)) %>%
ggplot(., aes(x = as.factor(edicion), y = average_members_abroad)) +
geom_boxplot() +
geom_smooth(method = "lm") +
facet_wrap(~high_remit_burden)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza, r308c, r44003a, r44005a, r44108) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = if_else(remittance_hh == 1, max(r01b), NA),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = if_else(pobreza > 1, 0, 1),
renter =  if_else(r44003a > 0 | r44005a > 0 | r44108 > 0, 1, 0),
tenant = if_else(r308c > 0, 1, 0)) %>%
ungroup()
View(remittances_by_family)
data_all_years <- bind_rows(data_2019, data_2021, data_2023) %>%
mutate(poverty = if_else(pobreza > 1, 0, 1),
renter =  if_else(r44003a > 0 | r44005a > 0 | r44108 > 0, 1, 0),
tenant = if_else(r308c > 0, 1, 0))
View(data_all_years)
data_all_years <- bind_rows(data_2019, data_2021, data_2023) %>%
mutate(poverty = if_else(pobreza > 1, 0, 1))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza, r308c, r44003a, r44005a, r44108) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = if_else(remittance_hh == 1, max(r01b), NA),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, rm.na = T)) %>%
ungroup()
data_all_years <- bind_rows(data_2019, data_2021, data_2023) %>%
mutate(poverty = if_else(pobreza > 1, 0, 1))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza, r308c, r44003a, r44005a, r44108) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, rm.na = T)) %>%
ungroup()
View(data_all_years)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza, r308c, r44003a, r44005a, r44108) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T)) %>%
ungroup()
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza, r308c, r44003a, r44005a, r44108, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T)) %>%
ungroup()
data_all_years <- bind_rows(data_2019, data_2021, data_2023) %>%
mutate(poverty = if_else(pobreza > 1, 0, 1)) %>%
mutate(r308 = as.integer(trunc(r308)))
View(data_all_years)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza, r308c, r44003a, r44005a, r44108, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b, na.rm = T),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = mode(r308, na.rm = T)) %>%
ungroup()
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b, na.rm = T),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = mode(r308, na.rm = T)) %>%
ungroup()
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b, na.rm = T),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = mode(r308)) %>%
ungroup()
View(remittances_by_family)
mode()
mode(NA)
mode(1)
mode(2)
mode(2,3)
mode(c(2,3))
View(data_all_years)
max(c(NA,NA,NA))
max(c(NA,NA,NA), na.rm = T)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = max(r308)) %>%
ungroup()
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = mean(r308)) %>%
ungroup()
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = max(r308)) %>%
ungroup()
1:0
c(1:0)
c(1:5)
1:5
c(c(c(1))
)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = max(r308)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0))
remittances_by_family %>%
ggplot(., aes(x = as.factor(owner), y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_violin() +
facet_wrap(~edicion)
remittances_by_family %>%
ggplot(., aes(x = as.factor(owner), y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_bar() +
facet_wrap(~edicion)
remittances_by_family %>%
ggplot(., aes(x = as.factor(owner), y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
ggplot(., aes(x = as.factor(tenure), y = prop_remit_of_income)) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income)) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8)
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure), y = logit(prop_remit_of_income))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income/1-prop_remit_of_income))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_boxplot() +
facet_wrap(~edicion)
log(0/1)
log(0.001/1)
log(0.00000000000001/1)
remittances_by_family %>%
mutate(prop_remit_adj = (prop_remit_of_income * (58708-1) + 0.5)/58708,
prop_remit_adj_logit = log(prop_remit_adj/(1-prop_remit_adj))) %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure), y = prop_remit_adj_logit)) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8,
prop_remit_of_income > 0) %>%
ggplot(., aes(x = as.factor(tenure), y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_boxplot() +
facet_wrap(~edicion)
anova_data <- remittances_by_family %>%
subset(tenure %in% 1:8,
prop_remit_of_income > 0 & prop_remit_of_income < 1) %>%
mutate(prop_remit_logit = log(prop_remit_of_income/(1-prop_remit_of_income)))
anova_data <- remittances_by_family %>%
subset(tenure %in% 1:8,
prop_remit_of_income > 0) %>%
mutate(prop_remit_logit = log(prop_remit_of_income/(1-prop_remit_of_income)))
anova_data <- remittances_by_family %>%
subset(tenure %in% 1:8,
prop_remit_of_income > 0,
prop_remit_of_income < 1) %>%
mutate(prop_remit_logit = log(prop_remit_of_income/(1-prop_remit_of_income)))
View(anova_data)
anova_data <- remittances_by_family %>%
subset(tenure %in% 1:8,
prop_remit_of_income > 0.000001) %>%
mutate(prop_remit_logit = log(prop_remit_of_income/(1-prop_remit_of_income)))
View(anova_data)
anova_data <- remittances_by_family %>%
subset(tenure %in% 1:8,
prop_remit_of_income > 0.000001)
anova_data <- remittances_by_family %>%
subset(tenure %in% 1:8 &
prop_remit_of_income > 0)
View(anova_data)
anova_data <- remittances_by_family %>%
subset(tenure %in% 1:8 &
prop_remit_of_income > 0 &
prop_remit_of_income < 1)  %>%
mutate(prop_remit_logit = log(prop_remit_of_income/(1-prop_remit_of_income)))
View(anova_data)
tenure_model <- lm(prop_remit_logit ~ as.factor(tenure))
tenure_model <- anova_data %>% lm(prop_remit_logit ~ as.factor(tenure))
tenure_model <- lm(prop_remit_logit ~ as.factor(tenure), data = anova_data)
tenure_model <- lm(prop_remit_logit ~ as.factor(tenure), data = anova_data) %>%
aov() %>%
tidy()
lm(prop_remit_logit ~ as.factor(tenure), data = anova_data) %>%
aov() %>%
tidy()
remittances_by_family %>%
subset(tenure %in% 1:8,
prop_remit_of_income > 0) %>%
ggplot(., aes(x = as.factor(tenure),
y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_boxplot()
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure),
y = totayuda)) +
geom_boxplot()
remittances_by_family %>%
subset(tenure %in% 1:8,
totayuda > 0) %>%
ggplot(., aes(x = as.factor(tenure),
y = log(totayuda))) +
geom_boxplot()
remittances_by_family %>%
subset(tenure %in% 1:8,
prop_remit_of_income > 0) %>%
ggplot(., aes(x = as.factor(tenure),
y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_boxplot() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8,
prop_remit_of_income > 0) %>%
ggplot(., aes(x = as.factor(tenure),
y = log(prop_remit_of_income/(1-prop_remit_of_income)))) +
geom_boxplot()
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure),
y = log(ingfa))) +
geom_boxplot()
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure),
y = log(ingfa))) +
geom_vioolin()
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
ggplot(., aes(x = as.factor(tenure),
y = log(ingfa))) +
geom_violin()
remittances_by_municipality %>%
subset(edicion %in% c(2018, 2019, 2020, 2021, 2022)) %>%
ggplot(., aes(x = prop_remit_of_income, y = edu_spending)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Remittance Reliance and Education Spending by Municipality", x = "Proportion of income from remittences", y = "Mean monthly education spending")
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure) %>%
summarize(med_remit <- median(prop_remit_of_income))
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure) %>%
summarize(med_remit <- median(prop_remit_of_income, na.rm = T))
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure) %>%
summarize(med_remit <- mean(prop_remit_of_income, na.rm = T))
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure) %>%
summarize(med_remit <- mean(remittance_hh, na.rm = T))
View(data_all_years)
View(data_all_years)
View(shp_with_data)
ggplot(data = shp_with_data, aes(fill = log(pop_density), label = COD_MUN4)) +
geom_sf() +
scale_fill_viridis_c(option = "plasma", name = "") +
labs(title = "Log Transofrmed Population Density 2019 - 2021") +
geom_sf_text()
View(data_all_years)
View(data_all_years)
View(remittances_by_family)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = max(r308)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0))
library(haven)
library(tidyverse)
library(openxlsx)
library(sf)
library(broom)
library(purrr)
library(glmmTMB)
library(gamlss)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = max(r308)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0))
data_2023 <- read_sav("EHPM 2023.sav")
#data_2022 <- read_sav("EHPM 2022.sav")
data_2021 <- read_sav("EHPM 2021.sav")
#data_2020 <- read_sav("EHPM 2020.sav")
data_2019 <- read_sav("EHPM 2019.sav") %>%
mutate(r44003a = r44404a,
r44005a = r44406a,
r44108 = r44508)
#data_2018 <- read_sav("EHPM 2018.sav") %>%
#  mutate(idboleta = KEY_HOGAR)
#data_2015 <- read_sav("EHPM 2015.sav") %>%
#  select(!c(codigomunic))
#data_2011_raw <- read_sav("EHPM 2011/BDSEC00.sav")
data_all_years <- bind_rows(data_2019, data_2021, data_2023) %>%
mutate(poverty = if_else(pobreza > 1, 0, 1)) %>%
mutate(r308 = as.integer(trunc(r308)))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = max(r308)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0))
View(data_all_years)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = max(r308),
area = max(area)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0))
View(remittances_by_family)
remittances_by_municipality <- remittances_by_family %>%
ungroup() %>%
group_by(codigomunic, edicion) %>%
reframe(count = n(),
count_remit = sum(remittance_hh),
prop_remit = mean(remittance_hh),
average_remit = mean(totayuda, na.rm = T),
med_family_income = median(ingfa, na.rm = T),
prop_remit_of_income = mean(prop_remit_of_income,na.rm = T),
average_members_abroad = mean(members_abroad, na.rm = T),
med_income = median(ingfa),
edu_spending = mean(edu_spending, na.rm = T),
percent_in_poverty = mean(poverty, na.rm = T),
high_percent_poverty = if_else(percent_in_poverty > 0.09482062, 1, 0),
pct_rural = mean(area)) %>%
unique() %>%
ungroup()
View(remittances_by_municipality)
ggplot(data = shp_with_data, aes(fill = pct_rural)) +
geom_sf(lwd = 0.1) +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 1, length.out = 6)) +
facet_wrap(~edicion)
shp_with_data <- left_join(
expanded_shp,
remittances_by_municipality,
by = join_by(COD_MUN4 == codigomunic, edicion),
copy = FALSE,
suffix = c(".x", ".y"),
) %>%
mutate(pop_density = POB_TOTAL/AREA_KM2)
ggplot(data = shp_with_data, aes(fill = pct_rural)) +
geom_sf(lwd = 0.1) +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 1, length.out = 6)) +
facet_wrap(~edicion)
remittances_by_municipality <- remittances_by_family %>%
ungroup() %>%
group_by(codigomunic, edicion) %>%
reframe(count = n(),
count_remit = sum(remittance_hh),
prop_remit = mean(remittance_hh),
average_remit = mean(totayuda, na.rm = T),
med_family_income = median(ingfa, na.rm = T),
prop_remit_of_income = mean(prop_remit_of_income,na.rm = T),
average_members_abroad = mean(members_abroad, na.rm = T),
med_income = median(ingfa),
edu_spending = mean(edu_spending, na.rm = T),
percent_in_poverty = mean(poverty, na.rm = T),
high_percent_poverty = if_else(percent_in_poverty > 0.09482062, 1, 0),
pct_urban = mean(area)) %>%
unique() %>%
ungroup()
shp_with_data <- left_join(
expanded_shp,
remittances_by_municipality,
by = join_by(COD_MUN4 == codigomunic, edicion),
copy = FALSE,
suffix = c(".x", ".y"),
) %>%
mutate(pop_density = POB_TOTAL/AREA_KM2)
remittances_by_family %>%
subset(tenure %in% 1:8 &
area = 0) %>%
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure) %>%
summarize(med_remit <- mean(prop_remit_of_income, na.rm = T))
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure) %>%
summarize(med_remit <- mean(prop_remit, na.rm = T))
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure) %>%
summarize(med_remit <- mean(remittance_hh, na.rm = T))
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure, edicion) %>%
summarize(med_remit <- mean(remittance_hh, na.rm = T))
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure, edicion) %>%
summarize(med_remit = mean(remittance_hh, na.rm = T),
count = n())
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 1) %>%
group_by(tenure, edicion) %>%
summarize(med_remit = mean(remittance_hh, na.rm = T),
count = n())
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure, edicion) %>%
summarize(med_remit = mean(remittance_hh, na.rm = T),
count = n())
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure) %>%
summarize(med_remit = mean(remittance_hh, na.rm = T),
count = n())
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_point()
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_bar()
remittances_by_family %>%
subset(tenure %in% 1:8 &
area == 0) %>%
group_by(tenure) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_point() +
geom_text()
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_point() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_point() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_point() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area, edicion) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area) +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area, edicion) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area, edicion)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area, edicion) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area, edicion) %>%
summarize(mean_remit = mean(prop_remit_of_income, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~edicion)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(prop_remit_of_income, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0))
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(prop_remit_of_income, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(prop_remit, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8 &
remittance_hh != 0) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(prop_remit_of_income, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8 &
remittance_hh == 1) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(ingfa, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
sd(c(1,1,1,1,1,0,0,0,0,0,0))
sd(c(1,1,1,1,1,0,0,0,0,0,0))/sqrt(10)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count())) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count)) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count)) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=mean_remit-se, ymax=mean_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
View(data_2023)
remittances_by_family %>%
subset(tenure %in% 1:8 &
remittance_hh == 1) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(ingfa, na.rm = T),
count = n()) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_text() +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8 &
remittance_hh == 1) %>%
group_by(tenure, area) %>%
summarize(mean_remit = mean(prop_remit_of_income, na.rm = T),
count = n(),
se = sd(prop_remit_of_income)/sqrt(count)) %>%
ggplot(aes(x = as.factor(tenure), y = mean_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=mean_remit-se, ymax=mean_remit+se), width=.2, position=position_dodge(.9)) +
facet_wrap(~area)
data_all_years <- bind_rows(select(data_2019, !c(r601)), data_2021, data_2023) %>%
mutate(poverty = if_else(pobreza > 1, 0, 1),
r308 = as.integer(trunc(r308)),
r601 = if_else(r601 == 2, 1, 0))
remittances_by_municipality <- remittances_by_family %>%
ungroup() %>%
group_by(codigomunic, edicion) %>%
reframe(count = n(),
count_remit = sum(remittance_hh),
prop_remit = mean(remittance_hh),
average_remit = mean(totayuda, na.rm = T),
med_family_income = median(ingfa, na.rm = T),
prop_remit_of_income = mean(prop_remit_of_income,na.rm = T),
average_members_abroad = mean(members_abroad, na.rm = T),
med_income = median(ingfa),
edu_spending = mean(edu_spending, na.rm = T),
percent_in_poverty = mean(poverty, na.rm = T),
high_percent_poverty = if_else(percent_in_poverty > 0.09482062, 1, 0),
pct_urban = mean(area),
worried_food = max(r601)) %>%
unique() %>%
ungroup()
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area),
worried_food = max(r601)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area, r601) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area),
worried_food = max(r601)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0))
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(pct_worried_food = mean(worried_food, na.rm = T),
count = n(),
se = sd(worried_food)/sqrt(count)) %>%
ggplot(aes(x = as.factor(tenure), y = pct_worried_food, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=pct_worried_food-se, ymax=pct_worried_food+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
View(el_salvador_shp)
View(shp_with_data)
View(shp_with_data)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(200, 500, length.out = 6), direction = -1) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0,1, length.out = 6), direction = -1) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0,1, length.out = 8), direction = -1) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0, 1, length.out = 3), direction = -1) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0, 1, length.out = 10), direction = -1) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0, 0.5, length.out = 5), direction = -1) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0, 0.5, length.out = 8), direction = -1) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0, 0.5, length.out = 7), direction = -1) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0, 0.3, length.out = 6), direction = -1) +
facet_wrap(~edicion)
shp_with_data %>%
ggplot(aes(fill = percent_in_poverty)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma",breaks = seq(0, 0.25, length.out = 5), direction = -1) +
facet_wrap(~edicion)
data_2019 %>%
subset(r503a == 5)
data_2019 %>%
subset(r503a == 5) %>%
select(r308)
data_2019 %>%
subset(r503a == 5) %>%
select(r308) %>%
group_by(r308) %>%
summarize(count = n())
data_2019 %>%
subset(r503a >= 5 & r503a < 6) %>%
select(r308) %>%
group_by(r308) %>%
summarize(count = n())
data_2019 %>%
subset(r503a >= and 6 & r503a < 7) %>%
data_2019 %>%
subset(r503a >= 6 & r503a < 7) %>%
select(r308) %>%
group_by(r308) %>%
summarize(count = n())
data_2019 %>%
subset(is.na(r503a)) %>%
select(r308) %>%
group_by(r308) %>%
summarize(count = n())
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(prop_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count)) %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
tenure_prop_remit <- remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(prop_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count))
tenure_prop_remit
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
remittances_by_municipality_all_yrs <- remittances_by_family %>%
ungroup() %>%
group_by(codigomunic) %>%
reframe(count = n(),
count_remit = sum(remittance_hh),
prop_remit = mean(remittance_hh),
average_remit = mean(totayuda, na.rm = T),
med_family_income = median(ingfa, na.rm = T),
prop_remit_of_income = mean(prop_remit_of_income,na.rm = T),
average_members_abroad = mean(members_abroad, na.rm = T),
med_income = median(ingfa),
edu_spending = mean(edu_spending, na.rm = T),
percent_in_poverty = mean(poverty, na.rm = T),
high_percent_poverty = if_else(percent_in_poverty > 0.09482062, 1, 0),
pct_urban = mean(area)) %>%
unique() %>%
ungroup()
shp_with_data_all_yrs <- left_join(
el_salvador_shp,
remittances_by_municipality_all_yrs,
by = join_by(COD_MUN4 == codigomunic, edicion),
copy = FALSE,
suffix = c(".x", ".y"),
) %>%
mutate(pop_density = POB_TOTAL/AREA_KM2)
shp_with_data_all_yrs <- left_join(
el_salvador_shp,
remittances_by_municipality_all_yrs,
by = join_by(COD_MUN4 == codigomunic),
copy = FALSE,
suffix = c(".x", ".y"),
) %>%
mutate(pop_density = POB_TOTAL/AREA_KM2)
View(shp_with_data_all_yrs)
ggplot(shp_with_data_all_yrs, aes(fill = prop_remit)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 0.6, length.out = 6)) +
facet_wrap(~edicion)
ggplot(shp_with_data, aes(fill = prop_remit)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 0.6, length.out = 6)) +
facet_wrap(~edicion)
ggplot(data = shp_with_data_all_yrs, aes(fill = prop_remit_of_income)) +
geom_sf(lwd = 0.1) +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 0.35, length.out = 6), name = "proportion") +
labs(title = "Proportion of Income Coming From Remittances 2019-2023")
ggplot(shp_with_data_all_yrs, aes(fill = prop_remit)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 0.6, length.out = 6))
high_remit_munic <- remittances_by_municipality %>%
subset(prop_remit > 0.35) %>%
select(codigomunic)
View(high_remit_munic)
high_remit_munic <- remittances_by_municipality_all_yrs %>%
subset(prop_remit > 0.35) %>%
select(codigomunic)
high_remit_munic <- remittances_by_municipality_all_yrs %>%
subset(prop_remit > 0.35) %>%
select(codigomunic) %>%
pull()
high_remit_munic <- remittances_by_municipality_all_yrs %>%
subset(prop_remit > 0.35) %>%
select(codigomunic) %>%
as.list()
View(high_remit_munic)
high_remit_munic <- remittances_by_municipality_all_yrs %>%
subset(prop_remit > 0.35) %>%
select(codigomunic) %>%
pull() %>%
as.list()
View(high_remit_munic)
high_remit_munic <- remittances_by_municipality_all_yrs %>%
subset(prop_remit > 0.35) %>%
select(codigomunic) %>%
pull() %>%
as.vector()
high_remit_munic <- remittances_by_municipality_all_yrs %>%
subset(prop_remit > 0.35) %>%
select(codigomunic) %>%
pull()
remittances_by_family <- remittances_by_family %>%
mutate(high_remit_area = codigomunic %in% high_remit_munic)
View(remittances_by_family)
remittances_by_family <- remittances_by_family %>%
mutate(high_remit_area = ifelse(codigomunic %in% high_remit_munic, 1, 0))
View(remittances_by_family)
tenure_prop_remit <- remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, high_remit_area) %>%
summarize(prop_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count))
tenure_prop_remit
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~high_remit_area)
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~high_remit_area, scales = "free")
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
tenure_prop_remit <- remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(prop_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count))
tenure_prop_remit
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area)))+
geom_bar(position = "fill", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area),
y = count()))+
geom_bar(position = "fill", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area),
y = n()))+
geom_bar(position = "fill", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area),
y = remittance_hh)+
geom_bar(position = "fill", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area),
y = remittance_hh))+
geom_bar(position = "fill", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area),
y = remittance_hh))+
geom_bar(position = "dodge", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area))+
geom_hist(position = "dodge", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area)))+
geom_hist(position = "dodge", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area)))+
geom_histogram(position = "dodge", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area)))+
geom_histogram()
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area),
y = remittance_hh)+
geom_bar(position = "fill", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(high_remit_area),
y = remittance_hh))+
geom_bar(position = "fill", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(area),
y = remittance_hh))+
geom_bar(position = "fill", stat = "identity")
remittances_by_family %>% ggplot(aes(fill = as.factor(tenure),
x = as.factor(area),
y = remittance_hh))+
geom_bar(position = "fill", stat = "identity") +
scale_fill_discrete()
fit <- glm(remittance_HH ~ area, family = binomial, data = remittances_by_family)
fit <- glm(remittance_hh ~ area, family = binomial, data = remittances_by_family)
summary(fit)
fit <- glm(remittance_hh ~ as.factor(area), family = binomial, data = remittances_by_family)
summary(fit)
View(remittances_by_family)
fit <- glm(remittance_hh ~ as.factor(area) + members, family = binomial, data = remittances_by_family)
summary(fit)
fit <- glm(as.factor(remittance_hh) ~ as.factor(area) + members, family = binomial, data = remittances_by_family)
summary(fit)
fit <- glm(as.factor(remittance_hh) ~ as.factor(area) + members, family = binomial, data = remittances_by_family)
summary(fit) %>%
tidy()
fit <- glm(as.factor(remittance_hh) ~ as.factor(area) + members, family = binomial, data = remittances_by_family)
summary(fit)
fit <- glm(as.factor(remittance_hh) ~ as.factor(area) + members + poverty, family = binomial, data = remittances_by_family)
summary(fit)
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~poverty)
tenure_prop_remit <- remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, poverty) %>%
summarize(prop_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count))
tenure_prop_remit
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~poverty)
tenure_prop_remit <- remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(prop_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count))
tenure_prop_remit
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
View(remittances_by_family)
fit <- glm(as.factor(remittance_hh) ~ as.factor(area) + members + ingfa, family = binomial, data = remittances_by_family)
summary(fit)
fit <- glm(as.factor(remittance_hh) ~ as.factor(area) + members + ingfa, family = binomial, data = remittances_by_family)
summary(fit)
step(fit)
ggplot(data = remittances_by_family, aes(x = ingfa, y = remittance_hh)) +
geom_jitter(width = 0, height = 0.05, alpha = 0.5)
data_all_years %>% summarize(meddian(ingfa))
data_all_years %>% summarize(median(ingfa))
data_all_years %>% summarize(q1(ingfa))
data_all_years %>% summarize(qantile(ingfa))
data_all_years %>% summarize(quantile(ingfa))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area, r601) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area),
worried_food = max(r601),
poverty_q = case_when(
ingfa >= 310 ~ 1,
ingfa >= 520 ~ 2,
ingfa >= 870 ~ 3,
ingfa >= 30397 ~ 4)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0))
View(remittances_by_family)
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area, r601) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area),
worried_food = max(r601)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0),
poverty_q = case_when(
ingfa >= 310 ~ 1,
ingfa >= 520 ~ 2,
ingfa >= 870 ~ 3,
ingfa >= 30397 ~ 4))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area, r601) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area),
worried_food = max(r601)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0),
poverty_q = case_when(
ingfa <= 310 ~ 1,
ingfa <= 520 ~ 2,
ingfa <= 870 ~ 3,
ingfa <= 30397 ~ 4))
remittances_by_family %>%
group_by(poverty_q) %>%
mutate(totayuda = ifelse(totayunda > 0, totayunda, NA)) %>%
summarise(pct_remit = mean(remittance_hh),
mean_val = mean(totayunda))
remittances_by_family %>%
group_by(poverty_q) %>%
mutate(totayuda = ifelse(totayunda > 0, totayuda, NA)) %>%
summarise(pct_remit = mean(remittance_hh),
mean_val = mean(totayuda))
remittances_by_family %>%
group_by(poverty_q) %>%
mutate(totayuda = ifelse(totayunda > 0, totayuda, NA)) %>%
summarise(pct_remit = mean(remittance_hh),
mean_val = mean(totayuda))
remittances_by_family %>%
mutate(totayuda = ifelse(totayunda > 0, totayuda, NA)) %>%
group_by(poverty_q) %>%
summarise(pct_remit = mean(remittance_hh),
mean_val = mean(totayuda))
remittances_by_family %>%
mutate(totayuda = ifelse(totayuda > 0, totayuda, NA)) %>%
group_by(poverty_q) %>%
summarise(pct_remit = mean(remittance_hh),
mean_val = mean(totayuda))
remittances_by_family %>%
mutate(totayuda = ifelse(totayuda > 0, totayuda, NA)) %>%
group_by(poverty_q) %>%
summarise(pct_remit = mean(remittance_hh, na.rm = T),
mean_val = mean(totayuda))
remittances_by_family %>%
mutate(totayuda = ifelse(totayuda > 0, totayuda, NA)) %>%
group_by(poverty_q) %>%
summarise(pct_remit = mean(remittance_hh, na.rm = T),
mean_val = mean(totayuda, na.rm = T))
data_2015 <- read_sav("EHPM 2015.sav") %>%
select(!c(codigomunic))
#data_2011_raw <- read_sav("EHPM 2011/BDSEC00.sav")
codes_2021 <- data_2021 %>%
select(correlativo,codigomunic)
codes_2019 <- data_2019 %>%
select(correlativo,codigomunic)
all_codes <- bind_rows(codes_2021, codes_2019)
counties_for_2020 <- all_codes %>%
group_by(correlativo) %>%
summarize(codigomunic = max(codigomunic))
data_2015 <-
left_join(
data_2015,
counties_for_2020,
by = join_by(correlativo == correlativo),
copy = FALSE,
suffix = c(".x", ".y"),
)
View(data_2015)
data_all_years <- bind_rows(select(data_2019, !c(r601)), data_2021, data_2023, data_2015) %>%
mutate(poverty = if_else(pobreza > 1, 0, 1),
r308 = as.integer(trunc(r308)),
r601 = if_else(r601 == 2, 1, 0))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area, r601) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area),
worried_food = max(r601)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0),
poverty_q = case_when(
ingfa <= 310 ~ 1,
ingfa <= 520 ~ 2,
ingfa <= 870 ~ 3,
ingfa <= 30397 ~ 4))
remittances_by_family %>%
subset(edicion == 2015) %>%
mutate(totayuda = ifelse(totayuda > 0, totayuda, NA)) %>%
group_by(poverty_q) %>%
summarise(pct_remit = mean(remittance_hh, na.rm = T),
mean_val = mean(totayuda, na.rm = T))
remittances_by_family %>%
subset(edicion == 2015 & remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarise(remit = n(),
mean_val = mean(totayuda, na.rm = T))
remittances_by_family %>%
subset(edicion == 2015 & remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarise(remit = n(),
mean_val = mean(totayuda, na.rm = T)) %>%
mutate(pct_remit = remit/ sum(remit))
remittances_by_family %>%
subset(edicion == 2019 & remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarise(remit = n(),
mean_val = mean(totayuda, na.rm = T)) %>%
mutate(pct_remit = remit/ sum(remit))
remittances_by_family %>%
subset(edicion == 2021 & remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarise(remit = n(),
mean_val = mean(totayuda, na.rm = T)) %>%
mutate(pct_remit = remit/ sum(remit))
remittances_by_family %>%
subset(edicion == 2023 & remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarise(remit = n(),
mean_val = mean(totayuda, na.rm = T)) %>%
mutate(pct_remit = remit/ sum(remit))
data_all_years <- bind_rows(select(data_2019, !c(r601)), data_2021, data_2023) %>%
mutate(poverty = if_else(pobreza > 1, 0, 1),
r308 = as.integer(trunc(r308)),
r601 = if_else(r601 == 2, 1, 0))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area, r601) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area),
worried_food = max(r601)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0),
poverty_q = case_when(
ingfa <= 310 ~ 1,
ingfa <= 520 ~ 2,
ingfa <= 870 ~ 3,
ingfa <= 30397 ~ 4))
remittances_by_family %>%
subset(edicion == 2023) %>%
group_by(poverty_q) %>%
summarise(count = n())
remittances_by_family %>%
group_by(poverty_q) %>%
summarise(count = n())
data_all_years %>% sumamry(ingfa)
data_all_years %>% summary(ingfa)
data_all_years %>% summarize(summary(ingfa))
data_all_years %>% summarize(quantile(ingfa, type = 9))
data_all_years %>% summarize(quantile(ingfa, type = 8))
data_all_years %>% summarize(quantile(ingfa, type = 7))
remittances_by_family %>% summarize(quantile(ingfa, type = 7))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area, r601) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area),
worried_food = max(r601)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0),
poverty_q = case_when(
ingfa <= 260 ~ 1,
ingfa <= 445 ~ 2,
ingfa <= 761 ~ 3,
ingfa <= 30397 ~ 4))
remittances_by_family %>%
group_by(poverty_q) %>%
remittances_by_family %>%
group_by(poverty_q)
remittances_by_family %>%
subset(remittence_HH == 1) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_HH == 1) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
#  subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2019) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2023) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2021) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2015) %>%
group_by(poverty_q) %>%
summarize(count = n())
data_all_years <- bind_rows(select(data_2019, !c(r601)), data_2021, data_2023, data_2015) %>%
mutate(poverty = if_else(pobreza > 1, 0, 1),
r308 = as.integer(trunc(r308)),
r601 = if_else(r601 == 2, 1, 0))
#Aggregate by HH then by Municipality since income reported at HH level
remittances_by_family <- data_all_years %>%
select(edicion,totayuda,codigomunic,idboleta,ingfa, r01b, gmed, pobreza,r308, poverty, area, r601) %>%
mutate(remittance_hh = if_else(totayuda > 0, 1, 0)) %>%
mutate(totayuda = if_else(totayuda < 0, NA, totayuda)) %>%
group_by(codigomunic, idboleta, edicion) %>%
summarize(remittance_hh = max(remittance_hh),
totayuda = mean(totayuda, na.rm = T),
ingfa = mean(ingfa, na.rm = T),
prop_remit_of_income = totayuda/ingfa,
edicion = max(edicion),
members_abroad = max(r01b),
members = n(),
edu_spending = mean(gmed/members, na.rm = T),
poverty = max(poverty, na.rm = T),
tenure = min(r308),
area = max(area),
worried_food = max(r601)) %>%
ungroup() %>%
mutate(owner = ifelse(tenure %in% 2:5, 1, 0),
poverty_q = case_when(
ingfa <= 260 ~ 1,
ingfa <= 445 ~ 2,
ingfa <= 761 ~ 3,
ingfa <= 30397 ~ 4))
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2015) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2023) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2015) %>%
group_by(poverty_q) %>%
summarize(count = n())
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2015) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda))
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2023) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda))
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2015) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda))
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2021) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda))
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2021) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop = mean(prop_remit_of_income))
remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop = mean(prop_remit_of_income))
ggplot(data = shp_with_data_all_yrs, aes(fill = prop_remit_of_income)) +
geom_sf(lwd = 0.1) +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 0.35, length.out = 6), name = "proportion") +
labs(title = "Average Proportion of Income Coming From Remittances 2019-2023")
area <- list(
0 = "Rural",
area_labeller <- c(
0 = "Rural",
area_labeller <- c(
"0" = "Rural",
"1" = "Urban"
)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
group_by(tenure, area) %>%
summarize(pct_worried_food = mean(worried_food, na.rm = T),
count = n(),
se = sd(worried_food)/sqrt(count)) %>%
ggplot(aes(x = as.factor(tenure), y = pct_worried_food, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=pct_worried_food-se, ymax=pct_worried_food+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area, labeller = area_labeller)
area_labeller <- c(
as.integer("0") = "Rural",
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
mutate(if_else(area == 1, "Urban", "Rural")) %>%
group_by(tenure, area) %>%
summarize(pct_worried_food = mean(worried_food, na.rm = T),
count = n(),
se = sd(worried_food)/sqrt(count)) %>%
ggplot(aes(x = as.factor(tenure), y = pct_worried_food, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=pct_worried_food-se, ymax=pct_worried_food+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area, labeller = area_labeller)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
mutate(if_else(area == 1, "Urban", "Rural")) %>%
group_by(tenure, area) %>%
summarize(pct_worried_food = mean(worried_food, na.rm = T),
count = n(),
se = sd(worried_food)/sqrt(count)) %>%
ggplot(aes(x = as.factor(tenure), y = pct_worried_food, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=pct_worried_food-se, ymax=pct_worried_food+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
remittances_by_family %>%
subset(tenure %in% 1:8) %>%
mutate(area = if_else(area == 1, "Urban", "Rural")) %>%
group_by(tenure, area) %>%
summarize(pct_worried_food = mean(worried_food, na.rm = T),
count = n(),
se = sd(worried_food)/sqrt(count)) %>%
ggplot(aes(x = as.factor(tenure), y = pct_worried_food, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=pct_worried_food-se, ymax=pct_worried_food+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
tenure_prop_remit <- remittances_by_family %>%
subset(tenure %in% 1:8) %>%
mutate(area = if_else(area == 1, "Urban", "Rural")) %>%
group_by(tenure, area) %>%
summarize(prop_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count))
tenure_prop_remit
tenure_prop_remit <- remittances_by_family %>%
subset(tenure %in% 1:8) %>%
mutate(area = if_else(area == 1, "Urban", "Rural")) %>%
group_by(tenure, area) %>%
summarize(prop_remit = mean(remittance_hh, na.rm = T),
count = n(),
se = sd(remittance_hh)/sqrt(count))
tenure_prop_remit
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area)
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area) +
labs(title = "Proportion of families who recieve remittances",
subtitle = "by home ownership status",
x = "Home ownership type",
y = "")
tenure_prop_remit %>%
ggplot(aes(x = as.factor(tenure), y = prop_remit, label = count)) +
geom_col() +
geom_errorbar(aes(ymin=prop_remit-se, ymax=prop_remit+se), width=.2,
position=position_dodge(.9)) +
facet_wrap(~area) +
labs(title = "Proportion of families who recieve remittances",
subtitle = "by home ownership status",
x = "Home ownership type",
y = "Proportion")
remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop = mean(prop_remit_of_income)) %>%
tidy()
remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop = mean(prop_remit_of_income))
remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop_income = mean(prop_remit_of_income),
prop_total = count/sum(count))
remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop_income = mean(prop_remit_of_income),
prop_total = count/sum(n()))
remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop_income = mean(prop_remit_of_income)) %>%
mutate(prop_total = count/sum(count))
remittances_by_family %>%
subset(remittance_hh == 1 & eddicion == 2019) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop_income = mean(prop_remit_of_income)) %>%
mutate(prop_total = count/sum(count))
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2019) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop_income = mean(prop_remit_of_income)) %>%
mutate(prop_total = count/sum(count))
remittances_by_family %>%
subset(remittance_hh == 1 & edicion == 2023) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop_income = mean(prop_remit_of_income)) %>%
mutate(prop_total = count/sum(count))
remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop_income = mean(prop_remit_of_income)) %>%
mutate(prop_total = count/sum(count))
summary_stats <- remittances_by_family %>%
subset(remittance_hh == 1) %>%
group_by(poverty_q) %>%
summarize(count = n(),
mean_val = mean(totayuda),
mean_prop_income = mean(prop_remit_of_income)) %>%
mutate(prop_total = count/sum(count))
write_csv(summary_stats, "summary_stats.csv")
remittances_by_family %>%
subset(edicion = 2023) %>%
mean(remittance_hh)
remittances_by_family %>%
subset(edicion = 2023) %>%
mean(remittance_hh, na.rm = F)
remittances_by_family %>%
subset(edicion == 2023) %>%
mean(remittance_hh, na.rm = F)
remittances_by_family %>%
subset(edicion == 2023) %>%
mean(remittance_hh, na.rm = T)
remittances_by_family %>%
subset(edicion == 2023) %>%
mean(as.int(remittance_hh), na.rm = T)
remittances_by_family %>%
subset(edicion == 2023) %>%
mean(remittance_hh, na.rm = T)
View(remittances_by_family)
remittances_by_family %>%
mean(remittance_hh, na.rm = T)
remittances_by_family %>%
subset(edicion == 2023) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(edicion == 2019) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(edicion == 2019) %>%
summarize(mean(prop_remit_of_income, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(edicion == 2023) %>%
summarize(mean(prop_remit_of_income, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(edicion == 2023 & remittance_hh ==1) %>%
summarize(mean(prop_remit_of_income, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(edicion == 2019 & remittance_hh ==1) %>%
summarize(mean(prop_remit_of_income, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(edicion == 2021 & remittance_hh ==1) %>%
summarize(mean(prop_remit_of_income, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(edicion == 2023 & remittance_hh ==1) %>%
summarize(mean(prop_remit_of_income, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(edicion == 2019 & remittance_hh ==1) %>%
summarize(mean(prop_remit_of_income, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(edicion == 2021 & remittance_hh ==1) %>%
summarize(mean(prop_remit_of_income, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(remittance_hh ==1) %>%
summarize(mean(prop_remit_of_income, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(remittance_hh ==1) %>%
summarize(mean(members_abroad, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(remittance_hh == 0) %>%
summarize(mean(members_abroad, na.rm = T)) %>%
pull()
ggplot(shp_with_data_all_yrs, aes(fill = prop_remit)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 0.6, length.out = 6, name = "proportion"))
ggplot(shp_with_data_all_yrs, aes(fill = prop_remit)) +
geom_sf() +
scale_fill_viridis_b(option = "plasma", breaks = seq(0, 0.6, length.out = 6) , name = "proportion")
remittances_by_family %>%
subset(area = 0) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 0) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 1) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
#  subset(area == 1) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 0) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 1) %>%
summarize(mean(totayuda, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 0) %>%
summarize(mean(totayuda, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 0) %>%
summarize(mean(totayuda, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 0) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 0 & edicion = 2023) %>%
remittances_by_family %>%
subset(area == 0 & edicion == 2023) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 1 & edicion == 2023) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 1 & edicion == 2019) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 1 & edicion == 2021) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 1 & edicion == 2023) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 0) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
remittances_by_family %>%
subset(area == 1) %>%
summarize(mean(remittance_hh, na.rm = T)) %>%
pull()
(0.3149658-0.2384035)/0.3149658
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus) #for loading census data
library(GGally)     #for ggpairs
library(car)
library(sf)         #for spatial analysis
library(spdep)      #for calculating Moran's I
library(spatialreg) #for implementing spatial lag model
acs_clean_tract <- read_sf("ct_tracts.shp")
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$mdn_ncm, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
# Plot the map
ggplot(acs_clean_tract) +
geom_sf(aes(fill = mdn_ncm), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(mdn_hm_))) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut")
ols_model <- lm(log(mdn_ncm) ~ prcnt_m + bchlrs_ + employd + medin_g + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
# summary of the model
step(ols_model)
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
plot(ols_model, which=1)
summary(ols_model)
slm_model <- lagsarlm(log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model)
sem_model <- errorsarlm(mdn_ncm ~ prcnt_m + bchlrs_ + medin_g + employd + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model)
acs_clean_tract %>%
select(prcnt_m, bchlrs_, medin_g, mdn_hm_, pop_den, employd) %>%
mutate(mdn_hm_ = log(mdn_hm_),
pop_den = log(pop_den)) %>%
st_drop_geometry() %>%
ggpairs()
vif(ols_model)
ggplot(acs_clean_tract, aes(x = log(mdn_ncm), y = log(mdn_hm_))) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut",
x = "Log Transformed Median Income",
y = "Log Transformed Median Home Value")
ols_model <- lm(formula = log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + employd + log(pop_den) + log(mdn_hm_), data = acs_clean_tract)
plot(ols_model, which=1)
summary(ols_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
slm_model <- lagsarlm(log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model) %>%
tidy()
slm_model <- lagsarlm(log(mdn_ncm) ~ prcnt_m + bchlrs_ + medin_g + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
sem_model <- errorsarlm(mdn_ncm ~ prcnt_m + bchlrs_ + medin_g + employd + log(mdn_hm_), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
acs_clean_tract <- read_sf("ct_tracts.shp") %>%
rename(mdn_ncm = "median_income",
prcnt_m = "percent_minority",
bchlrs_ = "percent_bachelors",
employd = "percent_employedd",
medin_g = "median_age",
pop_den = "population_density",
mdn_hm_ = "median_home_value")
acs_clean_tract <- read_sf("ct_tracts.shp") %>%
rename(mdn_ncm = median_income,
prcnt_m = percent_minority,
bchlrs_ = percent_bachelors,
employd = percent_employedd,
medin_g = median_age,
pop_den = population_density,
mdn_hm_ = median_home_value)
acs_clean_tract <- read_sf("ct_tracts.shp") %>%
rename(median_income = mdn_ncm,
percent_minority= prcnt_m ,
percent_bachelors = bchlrs_,
percent_employed = employd,
median_age = medin_g,
population_density = pop_den,
median_home_value = mdn_hm_)
View(acs_clean_tract)
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test) %>%
tidy()
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test) %>%
tidy()[1]
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test) %>%
tidy()[1][1]
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test) %>%
tidy() %>%
kbl()
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
slm_model <- lagsarlm(log(median_income) ~ percent_minority + percent_bachelors + median_age + log(median_home_value), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus) #for loading census data
library(GGally)     #for ggpairs
library(car)
library(sf)         #for spatial analysis
library(spdep)      #for calculating Moran's I
library(spatialreg) #for implementing spatial lag model
acs_clean_tract <- read_sf("ct_tracts.shp") %>%
rename(median_income = mdn_ncm,
percent_minority= prcnt_m ,
percent_bachelors = bchlrs_,
percent_employed = employd,
median_age = medin_g,
population_density = pop_den,
median_home_value = mdn_hm_)
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
# Plot the map
ggplot(acs_clean_tract) +
geom_sf(aes(fill = median_income), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
ggplot(acs_clean_tract, aes(x = log(median_income), y = log(median_home_value))) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut",
x = "Log Transformed Median Income",
y = "Log Transformed Median Home Value")
ols_model <- lm(log(median_income) ~ percent_minority + percent_bachelors + percent_employed + median_age + log(population_density) + log(median_home_value), data = acs_clean_tract)
# summary of the model
step(ols_model)
acs_clean_tract %>%
select(percent_minority, percent_bachelors, median_age, median_home_value, population_density, percent_employed) %>%
mutate(median_home_value = log(median_home_value),
population_density = log(population_density)) %>%
st_drop_geometry() %>%
ggpairs()
vif(ols_model)
plot(ols_model, which=1)
ols_model <- lm(formula = log(median_income) ~ percent_minority + percent_bachelors + median_age + percent_employed + log(population_density) + log(median_home_value), data = acs_clean_tract)
summary(ols_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
slm_model <- lagsarlm(log(median_income) ~ percent_minority + percent_bachelors + median_age + log(median_home_value) +log(population_density), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
slm_model <- lagsarlm(log(median_income) ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) +log(population_density), data = acs_clean_tract, listw = tract_weights)
gc()
slm_model <- lagsarlm(log(median_income) ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) +log(population_density), data = acs_clean_tract, listw = tract_weights)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus) #for loading census data
library(GGally)     #for ggpairs
library(car)
library(sf)         #for spatial analysis
library(spdep)      #for calculating Moran's I
library(spatialreg) #for implementing spatial lag model
acs_clean_tract <- read_sf("ct_tracts.shp") %>%
rename(median_income = mdn_ncm,
percent_minority= prcnt_m ,
percent_bachelors = bchlrs_,
percent_employed = employd,
median_age = medin_g,
population_density = pop_den,
median_home_value = mdn_hm_)
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
# Plot the map
ggplot(acs_clean_tract) +
geom_sf(aes(fill = median_income), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
ggplot(acs_clean_tract, aes(x = log(median_income), y = log(median_home_value))) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut",
x = "Log Transformed Median Income",
y = "Log Transformed Median Home Value")
ols_model <- lm(log(median_income) ~ percent_minority + percent_bachelors + percent_employed + median_age + log(population_density) + log(median_home_value), data = acs_clean_tract)
# summary of the model
step(ols_model)
acs_clean_tract %>%
select(percent_minority, percent_bachelors, median_age, median_home_value, population_density, percent_employed) %>%
mutate(median_home_value = log(median_home_value),
population_density = log(population_density)) %>%
st_drop_geometry() %>%
ggpairs()
vif(ols_model)
plot(ols_model, which=1)
ols_model <- lm(formula = log(median_income) ~ percent_minority + percent_bachelors + median_age + percent_employed + log(population_density) + log(median_home_value), data = acs_clean_tract)
summary(ols_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
slm_model <- lagsarlm(log(median_income) ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) +log(population_density), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
sem_model <- errorsarlm(median_income ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) + log(population_density), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
sem_model <- errorsarlm(median_income ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) + log(population_density), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
AIF(sem_model)
sem_model <- errorsarlm(median_income ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) + log(population_density), data = acs_clean_tract, listw = tract_weights)
sem_model <- errorsarlm(median_income ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) + log(population_density), data = acs_clean_tract, listw = tract_weights)
sem_model <- errorsarlm(median_income ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) + log(population_density), data = acs_clean_tract, listw = tract_weights)
sem_model <- errorsarlm(median_income ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) + log(population_density), data = acs_clean_tract, listw = tract_weights)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus) #for loading census data
library(GGally)     #for ggpairs
library(car)
library(sf)         #for spatial analysis
library(spdep)      #for calculating Moran's I
library(spatialreg) #for implementing spatial lag model
acs_clean_tract <- read_sf("ct_tracts.shp") %>%
rename(median_income = mdn_ncm,
percent_minority= prcnt_m ,
percent_bachelors = bchlrs_,
percent_employed = employd,
median_age = medin_g,
population_density = pop_den,
median_home_value = mdn_hm_)
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus) #for loading census data
library(GGally)     #for ggpairs
library(car)
library(sf)         #for spatial analysis
library(spdep)      #for calculating Moran's I
library(spatialreg) #for implementing spatial lag model
acs_clean_tract <- read_sf("ct_tracts.shp") %>%
rename(median_income = mdn_ncm,
percent_minority= prcnt_m ,
percent_bachelors = bchlrs_,
percent_employed = employd,
median_age = medin_g,
population_density = pop_den,
median_home_value = mdn_hm_)
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus) #for loading census data
library(GGally)     #for ggpairs
library(car)
library(sf)         #for spatial analysis
library(spdep)      #for calculating Moran's I
library(spatialreg) #for implementing spatial lag model
acs_clean_tract <- read_sf("ct_tracts.shp") %>%
rename(median_income = mdn_ncm,
percent_minority= prcnt_m ,
percent_bachelors = bchlrs_,
percent_employed = employd,
median_age = medin_g,
population_density = pop_den,
median_home_value = mdn_hm_)
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
# Plot the map
ggplot(acs_clean_tract) +
geom_sf(aes(fill = median_income), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
ggplot(acs_clean_tract, aes(x = log(median_income), y = log(median_home_value))) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut",
x = "Log Transformed Median Income",
y = "Log Transformed Median Home Value")
#| warning: false
#| message: false
# Load Packages
library(tidyverse)
library(broom)
library(kableExtra)
library(tidycensus) #for loading census data
library(GGally)     #for ggpairs
library(car)
library(sf)         #for spatial analysis
library(spdep)      #for calculating Moran's I
library(spatialreg) #for implementing spatial lag model
acs_clean_tract <- read_sf("ct_tracts.shp") %>%
rename(median_income = mdn_ncm,
percent_minority= prcnt_m ,
percent_bachelors = bchlrs_,
percent_employed = employd,
median_age = medin_g,
population_density = pop_den,
median_home_value = mdn_hm_)
acs_clean_tract <- st_transform(acs_clean_tract, crs = 3857)  # Web Mercator
# Create neighbor list based on Queen's contiguity (common edges/corners)
tract_neighbors <- poly2nb(acs_clean_tract)
# Create spatial weights matrix
tract_weights <- nb2listw(tract_neighbors, style = "W", zero.policy = TRUE)
moran_test <- moran.test(acs_clean_tract$median_income, tract_weights, zero.policy = TRUE)
# Print Moran's I results
print(moran_test)
# Plot the map
ggplot(acs_clean_tract) +
geom_sf(aes(fill = median_income), color = NA) +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income by Census Tract in Connecticut",
fill = "Median Income")
ggplot(acs_clean_tract, aes(x = log(median_income), y = log(median_home_value))) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_viridis_c(option = "magma") +
labs(title = "Median Household Income vs Census Tract in Connecticut",
x = "Log Transformed Median Income",
y = "Log Transformed Median Home Value")
ols_model <- lm(log(median_income) ~ percent_minority + percent_bachelors + percent_employed + median_age + log(population_density) + log(median_home_value), data = acs_clean_tract)
# summary of the model
step(ols_model)
acs_clean_tract %>%
select(percent_minority, percent_bachelors, median_age, median_home_value, population_density, percent_employed) %>%
mutate(median_home_value = log(median_home_value),
population_density = log(population_density)) %>%
st_drop_geometry() %>%
ggpairs()
vif(ols_model)
plot(ols_model, which=1)
ols_model <- lm(formula = log(median_income) ~ percent_minority + percent_bachelors + median_age + percent_employed + log(population_density) + log(median_home_value), data = acs_clean_tract)
summary(ols_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
slm_model <- lagsarlm(log(median_income) ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) +log(population_density), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(slm_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
sem_model <- errorsarlm(median_income ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) + log(population_density), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model)# %>%
# tidy() %>%
# mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
# kbl(booktabs=TRUE, digits=2) %>%
# column_spec(1, monospace = TRUE)
sem_model <- errorsarlm(median_income ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) + log(population_density), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
sem_model <- errorsarlm(median_income ~ percent_minority + percent_bachelors + median_age + percent_employed + log(median_home_value) + log(population_density), data = acs_clean_tract, listw = tract_weights)
# summary of the model
summary(sem_model) %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(booktabs=TRUE, digits=2) %>%
column_spec(1, monospace = TRUE)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "tmap", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-01"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
install.packages("here")
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "tmap", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-01"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "tmap", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-01"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "tmap", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-01"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
install.packages(c("here", "sf", "tmap", 'tidycensus'))
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "tmap", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-01"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "tmap", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-01"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
includeMarkdown(here("data", "metadata", "precincts20.md"))
census_metadata_file <- here("data", "metadata", "census2020pl_vars.csv")
if(file.exists(census_metadata_file)){
census2020pl_vars <- read.csv(census_metadata_file)
} else {
census2020pl_vars <- load_variables(2020, "pl")
write.csv(census2020pl_vars, here("data", "metadata", "census2020pl_vars.csv"))
}
census_metadata_file <- here("data", "metadata", "census2020pl_vars.csv")
if(file.exists(census_metadata_file)){
census2020pl_vars <- read.csv(census_metadata_file)
} else {
census2020pl_vars <- load_variables(2020, "pl")
write.csv(census2020pl_vars, here("data", "metadata", "census2020pl_vars.csv"))
}
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2023-06-26"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2023-06-26"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2023-06-26"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-25"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-25"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
devtools::session_info()
install.packages(devtools)
install.packages('devtools')
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-25"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
library(knitr)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
prop2 <- read.csv(here("data", "derived", "public", "prop2.csv"))
prop2 <- read.csv(here("data", "derived", "public", "prop2.csv"))
prop5 <- read.csv(here("data", "derived", "public", "prop2.csv"))
vt_municipalities_file <- here("data", "raw", "public", "VT_municipalities.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(vt_municipalities_file)){
municipalities <- st_read(vt_municipalities_file)
} else {
municipalities <- get_decennial(
geography = "place",
state = "VT",
variables = "P1_001N",  # Total population from 2020 Census
year = 2020,
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(municipalities, vt_municipalities_file)
}
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
vt_municipalities_file <- here("data", "raw", "public", "VT_municipalities.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(vt_municipalities_file)){
municipalities <- st_read(vt_municipalities_file)
} else {
municipalities <- get_decennial(
geography = "place",
state = "VT",
variables = "P1_001N",  # Total population from 2020 Census
year = 2020,
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(municipalities, vt_municipalities_file)
}
View(municipalities)
View(municipalities)
View(prop2)
vt_municipalities_file <- here("data", "raw", "public", "VT_municipalities.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(vt_municipalities_file)){
municipalities <- st_read(vt_municipalities_file)
} else {
municipalities <- get_decennial(
geography = "voting district",
state = "VT",
variables = "P1_001N", # Total population from 2020 Census
year = 2020,
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(municipalities, vt_municipalities_file)
}
View(prop2)
View(prop2)
censusNames <- municipalities %>%
select(NAME20)
stateNames <- prop2 %>%
select(TOWN) %>%
str_to_title()
View(censusNames)
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
str_to_title()
View(censusNames)
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
str_to_title() %>%
as.data.frame()
View(stateNames)
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
str_to_title()
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN)
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
setdiff(censusNames, stateNames)
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
setdiff(c(censusNames), c(stateNames))
c(stateNames)
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
sort(setdiff(c(censusNames), c(stateNames)))
View(stateNames)
View(stateNames)
View(censusNames)
View(stateNames)
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
setdiff(as.list(censusNames), as.list(stateNames))
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
as.list(censusNames) %in% as.list(stateNames)
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
intersect(as.list(censusNames), as.list(stateNames))
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
intersect(as.list(censusNames), as.list(stateNames))
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
intersect(c(censusNames), c(stateNames))
View(stateNames)
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
intersect(pull(censusNames), pull(stateNames))
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
setdiff(pull(censusNames), pull(stateNames))
vt_municipalities_file <- here("data", "raw", "public", "VT_municipalities.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(vt_municipalities_file)){
municipalities <- st_read(vt_municipalities_file)
} else {
municipalities <- get_decennial(
geography = "place",
state = "VT",
variables = "P1_001N", # Total population from 2020 Census
year = 2020,
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(municipalities, vt_municipalities_file)
}
censusNames <- municipalities %>%
select(NAME20) %>%
st_drop_geometry()
View(municipalities)
censusNames <- municipalities %>%
select(NAME.x) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
setdiff(pull(censusNames), pull(stateNames))
censusNames <- municipalities %>%
select(NAME.x) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
setdiff(pull(stateNames), pull(censusNames))
View(censusNames)
vt_municipalities_file <- here("data", "raw", "public", "VT_municipalities.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(vt_municipalities_file)){
municipalities <- st_read(vt_municipalities_file)
} else {
municipalities <- get_decennial(
geography = "town",
state = "VT",
variables = "P1_001N", # Total population from 2020 Census
year = 2020,
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(municipalities, vt_municipalities_file)
}
vt_municipalities_file <- here("data", "raw", "public", "VT_municipalities.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(vt_municipalities_file)){
municipalities <- st_read(vt_municipalities_file)
} else {
municipalities <- get_decennial(
geography = "town",
state = "VT",
variables = "P1_001N", # Total population from 2020 Census
year = 2020,
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(municipalities, vt_municipalities_file)
}
vt_municipalities_file <- here("data", "raw", "public", "VT_municipalities.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(vt_municipalities_file)){
municipalities <- st_read(vt_municipalities_file)
} else {
municipalities <- get_decennial(
geography = "county subdivision",
state = "VT",
variables = "P1_001N", # Total population from 2020 Census
year = 2020,
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(municipalities, vt_municipalities_file)
}
vt_municipalities_file <- here("data", "raw", "public", "VT_municipalities.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(vt_municipalities_file)){
municipalities <- st_read(vt_municipalities_file)
} else {
municipalities <- get_decennial(
geography = "county subdivision",
state = "VT",
variables = "P1_001N", # Total population from 2020 Census
year = 2020,
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(municipalities, vt_municipalities_file)
}
censusNames <- municipalities %>%
select(NAME.x) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN) %>%
mutate(TOWN = str_to_title(TOWN))
setdiff(pull(stateNames), pull(censusNames))
View(municipalities)
View(municipalities)
prop2  %>%
mutate(TOWN = str_to_title(TOWN))
prop5  %>%
mutate(TOWN = str_to_title(TOWN))
View(prop2)
prop2 <- prop2  %>%
mutate(TOWN = str_to_title(TOWN))
prop5 <- prop5  %>%
mutate(TOWN = str_to_title(TOWN))
gsub(" Town", "", prop2$TOWN)
prop2$TOWN <- gsub(" Town", "", prop2$TOWN)
View(prop2)
prop2$TOWN <- gsub(" Town", "", prop2$TOWN)
prop2$TOWN <- gsub(" City", "", prop2$TOWN)
prop5$TOWN <- gsub(" Town", "", prop2$TOWN)
prop5$TOWN <- gsub(" City", "", prop2$TOWN)
prop2 %>% group_by(TOWN) %>%
summarise_each(list(sum))
prop2 %>% group_by(TOWN) %>%
across(list(sum))
prop2 %>% group_by(TOWN) %>%
summarise(across(where(is.numeric), sum), .groups = 'drop')
st_read(here("data", "raw", "public", "VT_towns.gpkg"))
towns <- st_read(here("data", "raw", "public", "VT_towns.gpkg"))
View(towns)
towns <- towns[!grepl("COUNTY", towns$TOWNNAME),]
prop2 <- read.csv(here("data", "derived", "public", "prop2.csv"))
prop5 <- read.csv(here("data", "derived", "public", "prop2.csv"))
E911Names <- towns %>%
select(TOWNNAME) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN)
setdiff(pull(stateNames), pull(E911Names))
E911Names <- towns %>%
select(TOWNNAME) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN)
setdiff(pull(E911Names), pull(stateNames))
towns <- towns[!grepl("COUNTY", towns$TOWNNAME),]
towns <- towns[!grepl("QUEBEC", towns$TOWNNAME),]
E911Names <- towns %>%
select(TOWNNAME) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN)
setdiff(pull(E911Names), pull(stateNames))
towns$TOWNNAME <- gsub("NORTH BENNINGTON", "BENNINGTON", towns$TOWNNAME)
towns <- st_read(here("data", "raw", "public", "VT_towns.gpkg"))
towns <- towns[!grepl("COUNTY", towns$TOWNNAME),]
towns <- towns[!grepl("QUEBEC", towns$TOWNNAME),]
E911Names <- towns %>%
select(TOWNNAME) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN)
setdiff(pull(E911Names), pull(stateNames))
View(prop2)
towns <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
towns <- st_read(here("data", "raw", "public", "VT_towns.gpkg"))
towns <- towns[!grepl("COUNTY", towns$TOWNNAME),]
towns <- towns[!grepl("QUEBEC", towns$TOWNNAME),]
townsData <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
townsData %>%
mutate(pctYes = as.integer(YES)/Grand.Total)
towndData <- townsData %>%
mutate(pctYes = as.integer(YES)/Grand.Total)
towndData <- townsData %>%
mutate(pctYes = as.integer(YES)/Grand.Total)
towndData <- townsData %>%
mutate(pctYes = as.integer(YES, na.rm = T)/Grand.Total)
towndData <- townsData %>%
mutate(pctYes = as.integer(YES, na.rm = F)/Grand.Total)
towndData <- townsData %>%
mutate(YES = as.integer(YES))
View(townsData)
as.integer(NA)
as.integer(1,300)
as.integer(1,300)
towndData <- townsData %>%
mutate(YES = gsub(",","", YES)) %>%
mutate(YES = as.integer(YES))
towndData <- townsData %>%
mutate(YES = gsub(",","", YES))# %>%
#  mutate(YES = as.integer(YES))
View(townsData)
towndData <- townsData %>%
mutate(YES = str_replace(",",""))# %>%
townsData$YES <- gsub(",", "", townsData$YES)
towndData <- townsData %>%
mutate(YES = as.integer(YES))
as.integer("300")
as.integer("3,00")
as.integer("3,000")
townsData$YES <- gsub(",", "", townsData$YES)
towndData <- townsData %>%
mutate(YES = as.integer(YES))
towndData <- townsData %>%
mutate(YES = as.integer(YES))
towndData <- townsData %>%
mutate(YES2 = as.integer(YES))
as.integer("100","100")
towndData <- townsData %>%
mutate(YES = as.numeric(YES))
towndData <- townsData %>%
mutate(
YES = str_trim(YES)
YES = as.numeric(YES))
towndData <- townsData %>%
mutate(
YES = str_trim(YES),
YES = as.numeric(YES))
rm(towndData)
townsData <- townsData %>%
mutate(
YES = str_trim(YES),
YES = as.numeric(YES))
townsData <- townsData %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES))
townsData <- townsData %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsData %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_b()
townsData %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
townsProp2 <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
townsProp5 <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
rm(townsData)
townsProp2$YES <- gsub(",", "", townsData$YES)
townsProp2$YES <- gsub(",", "", townsProp2$YES)
townsProp5$YES <- gsub(",", "", townsProp5$YES)
townsProp2 <- townsData %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp2 <- townsProp2 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp5 <- townsProp5 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp2 %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
townsProp2 %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
townsProp5 %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
View(townsProp2)
View(townsProp5)
View(prop2)
View(prop2)
View(prop5)
View(prop2)
View(prop5)
prop2 <- read.csv(here("data", "derived", "public", "prop2.csv"))
prop5 <- read.csv(here("data", "derived", "public", "prop2.csv"))
View(prop5)
prop2 <- read.csv(here("data", "derived", "public", "prop2.csv"))
prop5 <- read.csv(here("data", "derived", "public", "prop5.csv"))
townsProp2 <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
townsProp5 <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
townsProp2$YES <- gsub(",", "", townsProp2$YES)
townsProp5$YES <- gsub(",", "", townsProp5$YES)
townsProp2 <- townsProp2 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp5 <- townsProp5 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp2 %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
townsProp5 %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
View(townsProp5)
View(prop5)
View(townsProp5)
townsProp2 <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
townsProp5 <- towns %>%
left_join(prop5, by = c("TOWNNAME" = "TOWN"))
townsProp2$YES <- gsub(",", "", townsProp2$YES)
townsProp5$YES <- gsub(",", "", townsProp5$YES)
townsProp2 <- townsProp2 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp5 <- townsProp5 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp2 %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
townsProp5 %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
VT_HD <- st_read(here("data", "raw", "public", "VT_house_districts", "VT_house_districts.shp"))
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
VT_HD <- st_read(here("data", "raw", "public", "VT_house_districts", "VT_house_districts.shp"))
VT_union_membership <- st_read(here("data", "raw", "public", "VT_AFL-CIO_CTW_membership.csv"))
VT_union_membership <- read.csv(here("data", "raw", "public", "VT_AFL-CIO_CTW_membership.csv"))
VT_union_membership <- read_csv(here("data", "raw", "public", "VT_ALF-CIO_CTW_membership.csv"))
View(VT_HD)
View(VT_union_membership)
VT_union_membership < VT_union_membership %>%
pivot_wider(
names_from = 'Member Type',             # what becomes column names
values_from = 'Total People',            # what fills the cells
names_glue = "{Member Type}"  # glue pattern to rename columns
)
VT_union_membership < VT_union_membership %>%
pivot_wider(
names_from = `Member Type`,             # what becomes column names
values_from = `Total People`,            # what fills the cells
names_glue = "{Member Type}"  # glue pattern to rename columns
)
VT_union_membership < VT_union_membership %>%
pivot_wider(
names_from = `Member Type`,
values_from = `Total People`
)
VT_union_membership < VT_union_membership %>%
pivot_wider(
names_from = "Member Type",
values_from = "Total People"
)
VT_union_membership <- VT_union_membership %>%
pivot_wider(
names_from = "Member Type",
values_from = "Total People"
)
View(VT_union_membership)
VT_union_membership <- read_csv(here("data", "raw", "public", "VT_ALF-CIO_CTW_membership.csv"))
View(VT_union_membership)
VT_union_membership <- VT_union_membership %>%
subset(`Member Type` != "Total People") %>%
pivot_wider(
names_from = "Member Type",
values_from = "Total People"
)
View(VT_union_membership)
VT_union_membership_shape <- VT_HD %>%
left_join(prop2, by = c("DISTRICT" = "HD"))
View(VT_union_membership)
View(VT_HD)
VT_union_membership_shape <- VT_HD %>%
right_join(prop2, by = c("DISTRICT" = "HD"))
VT_union_membership_shape <- VT_HD %>%
left_join(VT_union_membership, by = c("DISTRICT" = "HD"))
View(VT_union_membership_shape)
VT_union_membership <- read_csv(here("data", "raw", "public", "VT_ALF-CIO_CTW_membership.csv"))
VT_union_membership <- VT_union_membership %>%
subset(`Member Type` != "Total People") %>%
pivot_wider(
names_from = "Member Type",
values_from = "Total People"
) %>%
mutate(totalMembership = `Member Type` + `Total People`)
VT_union_membership <- VT_union_membership %>%
subset(`Member Type` != "Total People") %>%
pivot_wider(
names_from = "Member Type",
values_from = "Total People"
) %>%
mutate(totalMembership = `AFL-CIO Member` + `CTW Member`)
View(VT_union_membership)
VT_union_membership_shape <- VT_HD %>%
left_join(VT_union_membership, by = c("DISTRICT" = "HD"))
VT_union_membership_shape <- VT_union_membership_shape %>%
mutate(pct_membership = totalMembership/ POPULATION)
VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c()
VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_inferno_c()
VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c(option = "inferno")
VT_union_membership_shape %>% ggplot(aes(fill = totalMembership)) +
geom_sf() +
scale_fill_viridis_c(option = "inferno")
VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c(option = "rocket")
VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c(option = "rocket")
VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c(option = "rocket") +
theme_minimal()
union_plot <- VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c(option = "rocket") +
theme_minimal()
View(union_plot)
rm(union_plot)
VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c(option = "rocket") +
theme_minimal()
dev.off()
VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c(option = "rocket") +
theme_minimal()
union_plot <- VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c(option = "rocket") +
theme_minimal()
plot(union_plot)
union_plot <- VT_union_membership_shape %>% ggplot(aes(fill = pct_membership)) +
geom_sf() +
scale_fill_viridis_c(option = "rocket") +
theme_minimal()
plot(union_plot)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-25"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-25"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Show outputs, but not code. Change to TRUE to show code as well
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-25"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Show outputs, but not code. Change to TRUE to show code as well
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
acs_subject_vars <- load_variables(2018, "acs5/subject")
acs_vars_S1810 <- acs_subject_vars |> filter(str_detect(name, "S1810"))
# If you wish to use a census API key, run the census_api_key() function in the console
# Query disability demographic data with geographic boundaries
acs <- get_acs(
geography = "county",
table = "S1810",
year = 2018,
output = "wide",
cache_table = TRUE,
geometry = TRUE,
keep_geo_vars = TRUE
)
# Query poverty and disability data
acs_pov <- get_acs(
geography = "county",
table = "C18130",
year = 2018,
output = "wide",
cache_table = TRUE
)
# Query state geographic data
state <- get_acs(
geography = "state",
year = 2018,
variables = c("B01001_001"),
geometry = TRUE,
keep_geo_vars = TRUE
)
# Save query results
saveRDS(acs, here("data", "raw", "public", "acs.RDS"))
saveRDS(acs_pov, here("data", "raw", "public", "acs_pov.RDS"))
saveRDS(state, here("data", "raw", "public", "state.RDS"))
View(state)
View(state)
View(state[[14]][[1]])
state[[14]][[1]]
st_crs(state)
acs <- readRDS(here("data", "raw", "public", "acs.RDS"))
acs_pov <- readRDS(here("data", "raw", "public", "acs_pov.RDS"))
state <- readRDS(here("data", "raw", "public", "state.RDS"))
View(towns)
View(VT_union_membership)
View(VT_HD)
townsProp2 %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# Chunk 2: load-town-voting-data
prop2 <- read.csv(here("data", "derived", "public", "prop2.csv"))
prop5 <- read.csv(here("data", "derived", "public", "prop5.csv"))
# Chunk 3: towns-from-e911-geodata-portal
towns <- st_read(here("data", "raw", "public", "VT_towns.gpkg"))
# Chunk 4: load-union-membership-data
VT_union_membership <- read_csv(here("data", "raw", "public", "VT_ALF-CIO_CTW_membership.csv"))
# Chunk 5: load-HD-from-geodata-portal
VT_HD <- st_read(here("data", "raw", "public", "VT_house_districts", "VT_house_districts.shp"))
# Chunk 6: remove-NY-counties
towns <- towns[!grepl("COUNTY", towns$TOWNNAME),]
towns <- towns[!grepl("QUEBEC", towns$TOWNNAME),]
# Chunk 7: find-differences-e911
E911Names <- towns %>%
select(TOWNNAME) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN)
setdiff(pull(E911Names), pull(stateNames))
# Chunk 8
towns$TOWNNAME <- gsub("NORTH BENNINGTON", "BENNINGTON", towns$TOWNNAME)
# Chunk 9: merge-shape-and-data
townsProp2 <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
townsProp5 <- towns %>%
left_join(prop5, by = c("TOWNNAME" = "TOWN"))
# Chunk 10: edit-YES-column-for-coversion
townsProp2$YES <- gsub(",", "", townsProp2$YES)
townsProp5$YES <- gsub(",", "", townsProp5$YES)
# Chunk 11: calculate-percentages
townsProp2 <- townsProp2 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp5 <- townsProp5 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
# Chunk 12: make-union-data-wide
VT_union_membership <- VT_union_membership %>%
subset(`Member Type` != "Total People") %>%
pivot_wider(
names_from = "Member Type",
values_from = "Total People"
) %>%
mutate(totalMembership = `AFL-CIO Member` + `CTW Member`)
# Chunk 13: join-shape-and-data
VT_union_membership_shape <- VT_HD %>%
left_join(VT_union_membership, by = c("DISTRICT" = "HD"))
# Chunk 14: calculate-percentages
VT_union_membership_shape <- VT_union_membership_shape %>%
mutate(pct_membership = totalMembership/ POPULATION)
townsProp2 %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c()
View(townsProp2)
View(towns)
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# Chunk 2: load-town-voting-data
prop2 <- read.csv(here("data", "derived", "public", "prop2.csv"))
prop5 <- read.csv(here("data", "derived", "public", "prop5.csv"))
# Chunk 3: towns-from-e911-geodata-portal
towns <- st_read(here("data", "raw", "public", "VT_towns.gpkg"))
# Chunk 4: load-union-membership-data
VT_union_membership <- read_csv(here("data", "raw", "public", "VT_ALF-CIO_CTW_membership.csv"))
# Chunk 5: load-HD-from-geodata-portal
VT_HD <- st_read(here("data", "raw", "public", "VT_house_districts", "VT_house_districts.shp"))
# Chunk 6: remove-NY-counties
towns <- towns[!grepl("COUNTY", towns$TOWNNAME),]
towns <- towns[!grepl("QUEBEC", towns$TOWNNAME),]
# Chunk 7: find-differences-e911
E911Names <- towns %>%
select(TOWNNAME) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN)
setdiff(pull(E911Names), pull(stateNames))
# Chunk 8
towns$TOWNNAME <- gsub("NORTH BENNINGTON", "BENNINGTON", towns$TOWNNAME)
# Chunk 9: select-releveent-variables
towns <- towns %>%
select(TOWNNAME)
# Chunk 10: merge-shape-and-data
townsProp2 <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
townsProp5 <- towns %>%
left_join(prop5, by = c("TOWNNAME" = "TOWN"))
# Chunk 11: edit-YES-column-for-coversion
townsProp2$YES <- gsub(",", "", townsProp2$YES)
townsProp5$YES <- gsub(",", "", townsProp5$YES)
# Chunk 12: calculate-percentages
townsProp2 <- townsProp2 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp5 <- townsProp5 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsPropBoth <- bind_rows(
townsProp2 %>% mutate(source = "prop2"),
townsProp5 %>% mutate(source = "prop5")
)
View(townsProp2)
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# Chunk 2: load-town-voting-data
prop2 <- read.csv(here("data", "derived", "public", "prop2.csv"))
prop5 <- read.csv(here("data", "derived", "public", "prop5.csv"))
# Chunk 3: towns-from-e911-geodata-portal
towns <- st_read(here("data", "raw", "public", "VT_towns.gpkg"))
# Chunk 4: load-union-membership-data
VT_union_membership <- read_csv(here("data", "raw", "public", "VT_ALF-CIO_CTW_membership.csv"))
# Chunk 5: load-HD-from-geodata-portal
VT_HD <- st_read(here("data", "raw", "public", "VT_house_districts", "VT_house_districts.shp"))
# Chunk 6: remove-NY-counties
towns <- towns[!grepl("COUNTY", towns$TOWNNAME),]
towns <- towns[!grepl("QUEBEC", towns$TOWNNAME),]
# Chunk 7: find-differences-e911
E911Names <- towns %>%
select(TOWNNAME) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN)
setdiff(pull(E911Names), pull(stateNames))
# Chunk 8
towns$TOWNNAME <- gsub("NORTH BENNINGTON", "BENNINGTON", towns$TOWNNAME)
# Chunk 9: select-releveent-variables
towns <- towns %>%
select(TOWNNAME)
# Chunk 10: merge-shape-and-data
townsProp2 <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
townsProp5 <- towns %>%
left_join(prop5, by = c("TOWNNAME" = "TOWN"))
# Chunk 11: edit-YES-column-for-coversion
townsProp2$YES <- gsub(",", "", townsProp2$YES)
townsProp5$YES <- gsub(",", "", townsProp5$YES)
townsProp5$NO <- gsub(",", "", townsProp5$YES)
# Chunk 12: calculate-percentages
townsProp2 <- townsProp2 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp5 <- townsProp5 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
NO = str_trim(NO),
NO = as.integer(NO),
pctYes = YES/Grand.Total)
townsPropBoth <- bind_rows(
townsProp2 %>% mutate(source = "prop2"),
townsProp5 %>% mutate(source = "prop5")
)
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# Chunk 2: load-town-voting-data
prop2 <- read.csv(here("data", "derived", "public", "prop2.csv"))
prop5 <- read.csv(here("data", "derived", "public", "prop5.csv"))
# Chunk 3: towns-from-e911-geodata-portal
towns <- st_read(here("data", "raw", "public", "VT_towns.gpkg"))
# Chunk 4: load-union-membership-data
VT_union_membership <- read_csv(here("data", "raw", "public", "VT_ALF-CIO_CTW_membership.csv"))
# Chunk 5: load-HD-from-geodata-portal
VT_HD <- st_read(here("data", "raw", "public", "VT_house_districts", "VT_house_districts.shp"))
# Chunk 6: remove-NY-counties
towns <- towns[!grepl("COUNTY", towns$TOWNNAME),]
towns <- towns[!grepl("QUEBEC", towns$TOWNNAME),]
# Chunk 7: find-differences-e911
E911Names <- towns %>%
select(TOWNNAME) %>%
st_drop_geometry()
stateNames <- prop2 %>%
select(TOWN)
setdiff(pull(E911Names), pull(stateNames))
# Chunk 8
towns$TOWNNAME <- gsub("NORTH BENNINGTON", "BENNINGTON", towns$TOWNNAME)
# Chunk 9: select-releveent-variables
towns <- towns %>%
select(TOWNNAME)
# Chunk 10: merge-shape-and-data
townsProp2 <- towns %>%
left_join(prop2, by = c("TOWNNAME" = "TOWN"))
townsProp5 <- towns %>%
left_join(prop5, by = c("TOWNNAME" = "TOWN"))
# Chunk 11: edit-YES-column-for-coversion
townsProp2$YES <- gsub(",", "", townsProp2$YES)
townsProp5$YES <- gsub(",", "", townsProp5$YES)
townsProp5$NO <- gsub(",", "", townsProp5$YES)
# Chunk 12: calculate-percentages
townsProp2 <- townsProp2 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
pctYes = YES/Grand.Total)
townsProp5 <- townsProp5 %>%
mutate(
YES = str_trim(YES),
YES = as.integer(YES),
NO = str_trim(NO),
NO = as.integer(NO),
pctYes = YES/Grand.Total)
townsPropBoth <- bind_rows(
townsProp2 %>% mutate(proposal = "prop2"),
townsProp5 %>% mutate(proposal = "prop5")
)
townsPropBoth %>% ggplot(aes(fill = pctYes)) +
geom_sf() +
scale_fill_viridis_c() +
facet_wrap(~ proposal) +
theme_minimal()
# Chunk 1: setup
# list of required packages
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
# load and install required packages
if(!require(groundhog)){
install.packages("groundhog")
require(groundhog)
}
if(!require(here)){
install.packages("here")
require(here)
}
groundhog.day <- "2025-02-01"
set.groundhog.folder(here("data", "scratch", "groundhog"))
groundhog.library(packages, groundhog.day,
tolerate.R.version='4.4.2')
tm_disability_rates <- tm_shape(acs_covid) +
tm_polygons("dis_pct",
title = "Percent of People with Disability\n(ACS 2014-2018)",
style = "quantile",
border.alpha = .2,
lwd = 0.2,
palette = "Oranges"
) +
tm_shape(state) +
tm_borders("grey", lwd = .5) +
tm_layout(
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
legend.text.size = 0.5
)
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-25"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Show outputs, but not code. Change to TRUE to show code as well
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# Chunk 2
acs_subject_vars <- load_variables(2018, "acs5/subject")
acs_vars_S1810 <- acs_subject_vars |> filter(str_detect(name, "S1810"))
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
conflicts_prefer(dplyr::filter)
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-25"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Show outputs, but not code. Change to TRUE to show code as well
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# Chunk 2
acs_subject_vars <- load_variables(2018, "acs5/subject")
acs_vars_S1810 <- acs_subject_vars |> filter(str_detect(name, "S1810"))
write_csv(acs_vars_S1810, here("data", "metadata", "acs_S1810_vars.csv"))
acs_vars <- load_variables(2018, "acs5")
acs_vars_C18130 <- acs_vars |> filter(str_detect(name, "C18130"))
write_csv(acs_vars_C18130, here("data", "metadata", "acs_C18130_vars.csv"))
# Chunk 4: load-acs
acs <- readRDS(here("data", "raw", "public", "acs.RDS"))
acs_pov <- readRDS(here("data", "raw", "public", "acs_pov.RDS"))
state <- readRDS(here("data", "raw", "public", "state.RDS"))
# Chunk 5: load-covid-data
covid <- read_sf(here("data", "raw", "public", "covidcase080120.gpkg"))
# select and rename the fips code, population, cases, and x,y coordinates
covid <- select(covid,
fips = FIPS,
pop = POP_ESTIMA,
cases = Confirmed,
x = X, y = Y
)
# Chunk 6: filter-join-acs
# Remove Alaska, Hawaii & Puerto Rico,
# transform coordinate system and fix geometries
acs <- filter(acs, !STATEFP %in% c("02", "15", "72")) %>%
st_transform(5070) %>%
st_make_valid()
# Remove Alaska, Hawaii & Puerto Rico,
state <- filter(state, !STATEFP %in% c("02", "15", "72")) %>%
st_transform(5070)
# Join poverty data to disability data
acs <- left_join(acs, acs_pov, by = "GEOID")
rm(acs_pov)
# Chunk 8: Preprocess-ACS
# calculate percentages
acs_derived <- mutate(acs,
dis_pct = S1810_C02_001E / S1810_C01_001E * 100,
white_pct = S1810_C02_004E / S1810_C01_001E * 100,
black_pct = S1810_C02_005E / S1810_C01_001E * 100,
native_pct = S1810_C02_006E / S1810_C01_001E * 100,
asian_pct = S1810_C02_007E / S1810_C01_001E * 100,
other_pct =
(S1810_C02_008E + S1810_C02_009E + S1810_C02_010E) / S1810_C01_001E * 100,
non_hisp_white_pct = S1810_C02_011E / S1810_C01_001E * 100,
hisp_pct = S1810_C02_012E / S1810_C01_001E * 100,
non_hisp_non_white_pct =
(S1810_C02_001E - S1810_C02_012E - S1810_C02_011E) / S1810_C01_001E * 100,
bpov_pct = (C18130_004E + C18130_011E + C18130_018E) / C18130_001E * 100,
apov_pct = (C18130_005E + C18130_012E + C18130_019E) / C18130_001E * 100,
pct_5_17 = S1810_C02_014E / S1810_C01_001E * 100,
pct_18_34 = S1810_C02_015E / S1810_C01_001E * 100,
pct_35_64 = S1810_C02_016E / S1810_C01_001E * 100,
pct_65_74 = S1810_C02_017E / S1810_C01_001E * 100,
pct_75 = S1810_C02_018E / S1810_C01_001E * 100,
male_pct = S1810_C02_002E / S1810_C01_001E * 100,
female_pct = S1810_C02_003E / S1810_C01_001E * 100
)
# select only relevant geographic identifiers and derived percentages
acs_derived <- acs_derived %>%
select(
fips = GEOID,
statefp = STATEFP,
county = NAME.x,
county_st = NAME,
contains("pct")
)
# Chunk 9: covid-rate
covid_table <- covid %>%
mutate(covid_rate = round(covid$cases / covid$pop * 100000, 2)) %>%
st_drop_geometry()
# Chunk 10: join-covid-to-acs
# Join COVID incidence rate data to acs data
acs_covid <- acs_derived %>%
left_join(covid_table, by = "fips")
# move covid_rate column prior to disability percentages
acs_covid <- acs_covid %>%
select(fips, statefp, county, county_st, covid_rate, everything())
rm(acs, acs_derived, covid)
# Chunk 11: missing data
# county with missing data
filter(acs_covid, is.na(bpov_pct)) %>% st_drop_geometry() %>% kable()
# replace NA with 0 for missing data
acs_covid[is.na(acs_covid$bpov_pct), ]$bpov_pct <- 0
acs_covid[is.na(acs_covid$apov_pct), ]$apov_pct <- 0
# Chunk 12: map-covid-rates
tm_covid_rates <- tm_shape(acs_covid) +
tm_polygons("covid_rate",
title = "COVID-19 Cases per 100,000 people\n(22 January 2020 to 1 August 2020)",
style = "quantile",
border.alpha = .2,
lwd = 0.2,
palette = "Oranges",
) +
tm_shape(state) +
tm_borders("grey", lwd = .5) +
tm_layout(
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
legend.text.size = 0.5
)
tm_covid_rates
# Chunk 13: map-disability-rates
tm_disability_rates <- tm_shape(acs_covid) +
tm_polygons("dis_pct",
title = "Percent of People with Disability\n(ACS 2014-2018)",
style = "quantile",
border.alpha = .2,
lwd = 0.2,
palette = "Oranges"
) +
tm_shape(state) +
tm_borders("grey", lwd = .5) +
tm_layout(
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
legend.text.size = 0.5
)
tm_disability_rates
# Chunk 14: descriptive-statistics
acs_covid_stats <- acs_covid %>%
st_drop_geometry() %>%
select(covid_rate, contains("pct")) %>%
stat.desc(norm = TRUE) %>%
round(2) %>%
t() %>%
as.data.frame() %>%
select(min, max, mean, SD = std.dev, ShapiroWilk = normtest.W, p = normtest.p)
acs_covid_stats %>%
kable(caption = "Reproduced Descriptive Statistics",
align = "c") %>%
column_spec(2:6, width_min = "5em") %>%
column_spec(7, width_min = "2em") %>%
kable_styling(full_width = FALSE)
# Chunk 15: compare-descriptive-stats
# load original table 1 results
table1 <- read.csv(here("data", "raw", "public", "chakraborty", "table1.csv"))
# subtract original results from reproduced results
(select(acs_covid_stats, min, max, mean, SD) -
select(table1, min, max, mean, SD)) %>%
kable(caption = "Descriptive Statistics Comparison",
align = "c") %>%
column_spec(2:5, width = "4em") %>%
kable_styling(full_width = FALSE)
rm(acs_covid_stats)
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
conflicts_prefer(dplyr::filter)
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
conflicts_prefer(dplyr::filter)
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
conflicts_prefer(dplyr::filter)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c(
"tidycensus", "tidyverse", "downloader", "sf", "classInt", "readr",
"here", "s2", "pastecs", "tmap", "SpatialEpi", "svDialogs",
"geepack", "knitr", "kableExtra", "foreign", "broom", "dotwhisker", "dotenv"
)
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-25"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Show outputs, but not code. Change to TRUE to show code as well
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
acs_subject_vars <- load_variables(2018, "acs5/subject")
acs_vars_S1810 <- acs_subject_vars |> filter(str_detect(name, "S1810"))
conflicted::conflicts_prefer(dplyr::filter)
acs_subject_vars <- load_variables(2018, "acs5/subject")
acs_vars_S1810 <- acs_subject_vars |> filter(str_detect(name, "S1810"))
write_csv(acs_vars_S1810, here("data", "metadata", "acs_S1810_vars.csv"))
acs_vars <- load_variables(2018, "acs5")
acs_vars_C18130 <- acs_vars |> filter(str_detect(name, "C18130"))
write_csv(acs_vars_C18130, here("data", "metadata", "acs_C18130_vars.csv"))
# If you wish to use a census API key, run the census_api_key() function in the console
# Query disability demographic data with geographic boundaries
acs <- get_acs(
geography = "county",
table = "S1810",
year = 2018,
output = "wide",
cache_table = TRUE,
geometry = TRUE,
keep_geo_vars = TRUE
)
# Query poverty and disability data
acs_pov <- get_acs(
geography = "county",
table = "C18130",
year = 2018,
output = "wide",
cache_table = TRUE
)
# Query state geographic data
state <- get_acs(
geography = "state",
year = 2018,
variables = c("B01001_001"),
geometry = TRUE,
keep_geo_vars = TRUE
)
# Save query results
saveRDS(acs, here("data", "raw", "public", "acs.RDS"))
saveRDS(acs_pov, here("data", "raw", "public", "acs_pov.RDS"))
saveRDS(state, here("data", "raw", "public", "state.RDS"))
acs <- readRDS(here("data", "raw", "public", "acs.RDS"))
acs_pov <- readRDS(here("data", "raw", "public", "acs_pov.RDS"))
state <- readRDS(here("data", "raw", "public", "state.RDS"))
covid <- read_sf(here("data", "raw", "public", "covidcase080120.gpkg"))
# select and rename the fips code, population, cases, and x,y coordinates
covid <- select(covid,
fips = FIPS,
pop = POP_ESTIMA,
cases = Confirmed,
x = X, y = Y
)
# Remove Alaska, Hawaii & Puerto Rico,
# transform coordinate system and fix geometries
acs <- filter(acs, !STATEFP %in% c("02", "15", "72")) %>%
st_transform(5070) %>%
st_make_valid()
# Remove Alaska, Hawaii & Puerto Rico,
state <- filter(state, !STATEFP %in% c("02", "15", "72")) %>%
st_transform(5070)
# Join poverty data to disability data
acs <- left_join(acs, acs_pov, by = "GEOID")
rm(acs_pov)
# Save downloaded acs data to acs.gpkg
st_write(
acs,
here("data", "derived", "public", "acs.gpkg"),
layer = "acs"
)
# calculate percentages
acs_derived <- mutate(acs,
dis_pct = S1810_C02_001E / S1810_C01_001E * 100,
white_pct = S1810_C02_004E / S1810_C01_001E * 100,
black_pct = S1810_C02_005E / S1810_C01_001E * 100,
native_pct = S1810_C02_006E / S1810_C01_001E * 100,
asian_pct = S1810_C02_007E / S1810_C01_001E * 100,
other_pct =
(S1810_C02_008E + S1810_C02_009E + S1810_C02_010E) / S1810_C01_001E * 100,
non_hisp_white_pct = S1810_C02_011E / S1810_C01_001E * 100,
hisp_pct = S1810_C02_012E / S1810_C01_001E * 100,
non_hisp_non_white_pct =
(S1810_C02_001E - S1810_C02_012E - S1810_C02_011E) / S1810_C01_001E * 100,
bpov_pct = (C18130_004E + C18130_011E + C18130_018E) / C18130_001E * 100,
apov_pct = (C18130_005E + C18130_012E + C18130_019E) / C18130_001E * 100,
pct_5_17 = S1810_C02_014E / S1810_C01_001E * 100,
pct_18_34 = S1810_C02_015E / S1810_C01_001E * 100,
pct_35_64 = S1810_C02_016E / S1810_C01_001E * 100,
pct_65_74 = S1810_C02_017E / S1810_C01_001E * 100,
pct_75 = S1810_C02_018E / S1810_C01_001E * 100,
male_pct = S1810_C02_002E / S1810_C01_001E * 100,
female_pct = S1810_C02_003E / S1810_C01_001E * 100
)
# select only relevant geographic identifiers and derived percentages
acs_derived <- acs_derived %>%
select(
fips = GEOID,
statefp = STATEFP,
county = NAME.x,
county_st = NAME,
contains("pct")
)
covid_table <- covid %>%
mutate(covid_rate = round(covid$cases / covid$pop * 100000, 2)) %>%
st_drop_geometry()
# Join COVID incidence rate data to acs data
acs_covid <- acs_derived %>%
left_join(covid_table, by = "fips")
# move covid_rate column prior to disability percentages
acs_covid <- acs_covid %>%
select(fips, statefp, county, county_st, covid_rate, everything())
rm(acs, acs_derived, covid)
# county with missing data
filter(acs_covid, is.na(bpov_pct)) %>% st_drop_geometry() %>% kable()
# replace NA with 0 for missing data
acs_covid[is.na(acs_covid$bpov_pct), ]$bpov_pct <- 0
acs_covid[is.na(acs_covid$apov_pct), ]$apov_pct <- 0
tm_covid_rates <- tm_shape(acs_covid) +
tm_polygons("covid_rate",
title = "COVID-19 Cases per 100,000 people\n(22 January 2020 to 1 August 2020)",
style = "quantile",
border.alpha = .2,
lwd = 0.2,
palette = "Oranges",
) +
tm_shape(state) +
tm_borders("grey", lwd = .5) +
tm_layout(
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
legend.text.size = 0.5
)
tm_covid_rates
tm_disability_rates <- tm_shape(acs_covid) +
tm_polygons("dis_pct",
title = "Percent of People with Disability\n(ACS 2014-2018)",
style = "quantile",
border.alpha = .2,
lwd = 0.2,
palette = "Oranges"
) +
tm_shape(state) +
tm_borders("grey", lwd = .5) +
tm_layout(
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
legend.text.size = 0.5
)
tm_disability_rates
acs_covid_stats <- acs_covid %>%
st_drop_geometry() %>%
select(covid_rate, contains("pct")) %>%
stat.desc(norm = TRUE) %>%
round(2) %>%
t() %>%
as.data.frame() %>%
select(min, max, mean, SD = std.dev, ShapiroWilk = normtest.W, p = normtest.p)
acs_covid_stats %>%
kable(caption = "Reproduced Descriptive Statistics",
align = "c") %>%
column_spec(2:6, width_min = "5em") %>%
column_spec(7, width_min = "2em") %>%
kable_styling(full_width = FALSE)
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "ggplot2", "tmap", "knitr", "tidycensus")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-23"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# Pull employment by sector data for Vermont
vt_employment <- get_acs(
geography = "state",
state = "VT",
table = "C24030",  # Employment by sector table
year = 2022,       # Choose your ACS year
survey = "acs5"    # 5-year ACS data
)
# View data
head(vt_employment)
# Optional: Clean and visualize
vt_employment_clean <- vt_employment %>%
separate(NAME, into = c("State"), sep = ",") %>%
mutate(Sector = str_remove(variable, "C24030_"))
# Print cleaned data
print(vt_employment_clean)
View(vt_employment_clean)
webshot("maps.html", "maps.png")
library(webshot)
source("~/Desktop/r_stuff/Annie/annier.R")
setwd("~/Desktop/r_stuff/Annie")
source("~/Desktop/r_stuff/Annie/annier.R", echo=TRUE)
OWR <- st_read("ituri.geojson")
NDO <- st_read("ndoki_4326.geojson")
LT <- st_read("lac_tele (1).geojson")
View(explanations)
map_pr_orgsupp <- ituri_slice %>%
leaflet(options = leafletOptions(zoomControl = FALSE,
minZoom = 8, maxZoom = 8,
dragging = FALSE,
attributionControl=FALSE)) %>%
setView(lat = 1.65,
lng = 28.80,
zoom = 8) %>%
addPolygons(data = OWR,
fillColor = '#32a8a0',
fillOpacity = 0.1,
weight = 2,
opacity = 1,
color = '#32a8a0',
dashArray = "3",) %>%
addCircleMarkers (fillColor = ~ PropPaletteMagma(pr_orgsupp),
stroke = FALSE,
radius = 5,
label = ~Village,
fillOpacity = 1) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addLegend("topright",
pal = PropPaletteMagma,
values = ~pr_orgsupp,
title = "Benefits Are From<br>External Support",
na.label = "No Benefits",
opacity = 1) %>%
htmlwidgets::prependContent(html_fix)
map_pr_extract <- ituri_slice %>%
leaflet(options = leafletOptions(zoomControl = FALSE,
minZoom = 8, maxZoom = 8,
dragging = FALSE,
attributionControl=FALSE)) %>%
setView(lat = 1.65,
lng = 28.80,
zoom = 8) %>%
addPolygons(data = OWR,
fillColor = '#32a8a0',
fillOpacity = 0.1,
weight = 2,
opacity = 1,
color = '#32a8a0',
dashArray = "3",) %>%
addCircleMarkers (fillColor = ~ PropPaletteMagma(pr_extract),
stroke = FALSE,
radius = 5,
label = ~Village,
fillOpacity = 1) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addLegend("topright",
pal = PropPaletteMagma,
values = ~pr_extract,
title = "Benefits Are From<br>Forest Extraction",
na.label = "No Benefits",
opacity = 1,
bins = 6) %>%
htmlwidgets::prependContent(html_fix)
View(map_pr_exist)
map_pr_exist
map_pr_dontknow <- ituri_slice %>%
leaflet(options = leafletOptions(zoomControl = FALSE,
minZoom = 8, maxZoom = 8,
dragging = FALSE,
attributionControl=FALSE)) %>%
setView(lat = 1.65,
lng = 28.80,
zoom = 8) %>%
addPolygons(data = OWR,
fillColor = '#32a8a0',
fillOpacity = 0.1,
weight = 2,
opacity = 1,
color = '#32a8a0',
dashArray = "3",) %>%
addCircleMarkers (fillColor = ~ PropPaletteMagma(pr_dontknow),
stroke = FALSE,
radius = 5,
label = ~Village,
fillOpacity = 1) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addLegend("topright",
pal = PropPaletteMagma,
values = ~pr_dontknow,
title = "Proportion Not<br>Aware of PA",
na.label = "No Benefits",
opacity = 1) %>%
htmlwidgets::prependContent(html_fix)
map_pr_dontben <- ituri_slice %>%
leaflet(options = leafletOptions(zoomControl = FALSE,
minZoom = 8, maxZoom = 8,
dragging = FALSE,
attributionControl=FALSE)) %>%
setView(lat = 1.65,
lng = 28.80,
zoom = 8) %>%
addPolygons(data = OWR,
fillColor = '#32a8a0',
fillOpacity = 0.1,
weight = 2,
opacity = 1,
color = '#32a8a0',
dashArray = "3",) %>%
addCircleMarkers (fillColor = ~ PropPaletteMagma(pr_dontben),
stroke = FALSE,
radius = 5,
label = ~Village,
fillOpacity = 1) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addLegend("topright",
pal = PropPaletteMagma,
values = ~pr_dontben,
title = "Aware But<br>Don't Benefit",
na.label = "No Benefits",
opacity = 1,
bins = 6) %>%
htmlwidgets::prependContent(html_fix)
map_pr_benef <- ituri_slice %>%
leaflet(options = leafletOptions(zoomControl = FALSE,
minZoom = 8, maxZoom = 8,
dragging = FALSE,
attributionControl=FALSE)) %>%
setView(lat = 1.65,
lng = 28.80,
zoom = 8) %>%
addPolygons(data = OWR,
fillColor = '#32a8a0',
fillOpacity = 0.1,
weight = 2,
opacity = 1,
color = '#32a8a0',
dashArray = "3",) %>%
addCircleMarkers (fillColor = ~ PropPaletteMagma(pr_benef),
stroke = FALSE,
radius = 5,
label = ~Village,
fillOpacity = 1) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addLegend("topright",
pal = PropPaletteMagma,
values = ~pr_benef,
title = "Proportion Reporting<br>Benefits",
na.label = "No Benefits",
opacity = 1) %>%
htmlwidgets::prependContent(html_fix)
leaflet_grid <-
tagList(
tags$table(width = "100%",
tags$tr(
tags$td(map_pr_dontknow),
tags$td(map_pr_dontben)
),
tags$tr(
tags$td(map_pr_benef),
tags$td(map_pr_orgsupp)
),
tags$tr(
tags$td(map_pr_extract),
tags$td(map_pr_exist)
)
)
)
output <- browsable(leaflet_grid)
output
save_html(output, "maps.html")
webshot("maps.html", "maps.pdf")
library(webshot2)
install.packagess("webshot2")
install.packages("webshot2")
library(webshot2)
detach("package:webshot", unload=TRUE)
library(webshot2)
webshot("maps.html", "maps.pdf")
leaflet_grid <-
tagList(
tags$table(width = "100%",
tags$tr(
tags$td(map_pr_dontknow),
tags$td(map_pr_dontben)
),
tags$tr(
tags$td(map_pr_benef),
tags$td(map_pr_orgsupp)
),
tags$tr(
tags$td(map_pr_extract),
tags$td(map_pr_exist)
)
)
)
output <- browsable(leaflet_grid)
output
save_html(output, "maps.html")
webshot("maps.html", "maps.pdf")
detach("package:webshot2", unload=TRUE)
library(webshot)
library(webshot)
leaflet_grid <-
tagList(
tags$table(width = "100%",
tags$tr(
tags$td(map_pr_dontknow),
tags$td(map_pr_dontben)
),
tags$tr(
tags$td(map_pr_benef),
tags$td(map_pr_orgsupp)
),
tags$tr(
tags$td(map_pr_extract),
tags$td(map_pr_exist)
)
)
)
####Load packages####
library(tidyverse)
library(leaflet)
library(sf)
library(viridis)
library(viridisLite)
library(RColorBrewer)
library(ggplot2)
library(htmlwidgets)
library(htmltools)
library(webshot)
leaflet_grid <-
tagList(
tags$table(width = "100%",
tags$tr(
tags$td(map_pr_dontknow),
tags$td(map_pr_dontben)
),
tags$tr(
tags$td(map_pr_benef),
tags$td(map_pr_orgsupp)
),
tags$tr(
tags$td(map_pr_extract),
tags$td(map_pr_exist)
)
)
)
output <- browsable(leaflet_grid)
output
save_html(output, "maps.html")
webshot::webshot("maps.html", "maps2.pdf")
install.packages("mapview")
library(webshot)
library(mapview)
PropPaletteMagma <- mapview::col2hex(colorNumeric(palette = "magma", domain = c(0, 1)))
PropPaletteMagma <- mapview:::col2hex(colorNumeric(palette = "magma", domain = c(0, 1)))
PropPaletteMagma <- col2hex(colorNumeric(palette = "magma", domain = c(0, 1)))
PropPaletteMagma <- mapview:::col2Hex(colorNumeric(palette = "magma", domain = c(0, 1)))
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "tmap", "tidycensus","knitr", "htmltools", "markdown")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-01"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "tmap", "tidycensus","knitr", "htmltools", "markdown")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-01"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# Chunk 2
includeMarkdown(here("data", "metadata", "precincts20.md"))
# Chunk 3
includeMarkdown(here("data", "metadata", "districts23.md"))
# Chunk 4
includeMarkdown(here("data", "metadata", "blockgroups2020.md"))
# Chunk 5
census_metadata_file <- here("data", "metadata", "census2020pl_vars.csv")
if(file.exists(census_metadata_file)){
census2020pl_vars <- read.csv(census_metadata_file)
} else {
census2020pl_vars <- load_variables(2020, "pl")
write.csv(census2020pl_vars, here("data", "metadata", "census2020pl_vars.csv"))
}
# Chunk 6
blockgroup_file <- here("data", "raw", "public", "block_groups.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(blockgroup_file)){
blockgroups <- st_read(blockgroup_file)
} else {
blockgroups <- get_decennial(geography = "block group",
sumfile = "pl",
table = "P3",
year = 2020,
state = "Alabama",
output = "wide",
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(blockgroups, blockgroup_file)
}
districts_file <- here("data", "raw", "public", "districts.gpkg")
st_layers(districts_file)
districts23 <- st_read(districts_file, layer="districts23")
ggplot(data = blockgroups) +
geom_sf()
ggplot(data = districts23) +
geom_sf()
ggplot(data = districts23) +
geom_sf() +
theme_linedraw()
ggplot(data = districts23) +
geom_sf() +
theme_minimal()
ggplot(data = districts23) +
geom_sf() +
theme_minimal() +
geom_sf_text(aes(label = DISTRICT), size = 3)
ggplot(data = districts23) +
geom_sf() +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 3)
ggplot(data = districts23) +
geom_sf() +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 4)
districts23 <- districts23 %>%
mutate(pctBlack = round(BLACK / POPULATION * 100, 1))
View(districts23)
st_crs(districts23)
blockgroups <- st_transform(blockgroups, 4269)
black_vars <- census2020pl_vars %>%
dplyr::filter(str_detect(name, "P3"),
str_detect(label, "Black")) %>%
select(-concept)
black_vars %>% kable()
blockgroups_calc <- blockgroups %>%
mutate(Black = rowSums(across(all_of(black_vars$name)), na.rm = TRUE)) %>%
mutate(bgarea = st_area(geom),
Total = P3_001N,
PctBlack = Black / Total * 100,
CheckPct = (Black + P3_003N) / Total * 100
) %>%
select(GEOID, bgarea, Black, Total, PctBlack, CheckPct)
st_write(blockgroups_calc,
here("data", "derived", "public", "blockgroups_calc.gpkg"),
append=FALSE)
ggplot(data = blockgroups_calc, fill = PctBlack) +
geom_sf() +
theme_void()
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf() +
theme_void()
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf() +
theme_void() +
scale_fill_viridis_d()
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf() +
theme_void() +
scale_fill_viridis_b()
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf() +
theme_void() +
scale_fill_viridis_b(bins = 5)
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf() +
theme_void() +
scale_fill_viridis_b(option = "mako")
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf() +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1)
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1)
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1, n =5)
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1, n = 6)
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_c(option = "mako", direction = -1, breaks = seq(min(mtcars$hp), max(mtcars$hp), length.out = 6))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_c(option = "mako", direction = -1, breaks = seq(0, 100, length.out = 6))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_c(option = "mako", direction = -1, breaks = seq(0, 100, 6))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1)
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1, breaks = 3)
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1, breaks = 20)
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1, breaks = c(20,40,60,80))
seq(1,100, length.out = 10)
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1, breaks = seq(0,100, length.out = 4))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako", direction = -1, breaks = seq(0,100,length.out = 6))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako",
direction = -1,
end = 0.95,
breaks = seq(0, 100, length.out = 6))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako",
direction = -1,
begin = 0.95,
breaks = seq(0, 100, length.out = 6))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako",
direction = -1,
begin = 0.05,
breaks = seq(0, 100, length.out = 6))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako",
direction = -1,
begin = 0.1,
breaks = seq(0, 100, length.out = 6))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako",
direction = -1,
begin = 0.3,
breaks = seq(0, 100, length.out = 6))
ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako",
direction = -1,
begin = 0.2,
breaks = seq(0, 100, length.out = 6))
ggplot(data = districts23) +
geom_sf(fill = NA) +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 4)
ggplot(data = districts23) +
geom_sf(fill = NA, color = "red") +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 4)
ggplot(data = districts23) +
geom_sf(fill = NA, color = "darkred") +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 4)
ggplot(data = districts23) +
geom_sf(fill = NA, color = "darkred", lwd = 1) +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 4)
ggplot(data = districts23) +
geom_sf(fill = NA, color = "darkred", lwd = 0.5) +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 4)
ggplot(data = districts23) +
geom_sf(fill = NA, color = "darkred", lwd = 0.5) +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 4, color = "darkred")
ggplot(data = districts23) +
geom_sf(fill = NA, color = "darkred", lwd = 0.5) +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 5, color = "darkred")
districtPlot <- ggplot(data = districts23) +
geom_sf(fill = NA, color = "darkred", lwd = 0.5) +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 5, color = "darkred")
districtPlot
pctBlackPlot <- ggplot(data = blockgroups_calc, aes(fill = PctBlack)) +
geom_sf(lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako",
direction = -1,
begin = 0.2,
breaks = seq(0, 100, length.out = 6))
pctBlackPlot
districtPlot + pctBlackPlot
ggplot() districtPlot$layers + pctBlackPlot$layers
ggplot() + districtPlot$layers + pctBlackPlot$layers
pctBlackPlot <- ggplot() +
geom_sf(data = blockgroups_calc, aes(fill = PctBlack),lwd = 0) +
theme_void() +
scale_fill_viridis_b(option = "mako",
direction = -1,
begin = 0.2,
breaks = seq(0, 100, length.out = 6))
pctBlackPlot
districtPlot <- ggplot() +
geom_sf(data = districts23, fill = NA, color = "darkred", lwd = 0.5) +
theme_void() +
geom_sf_text(aes(label = DISTRICT), size = 5, color = "darkred")
districtPlot
districtPlot <- ggplot() +
geom_sf(data = districts23, fill = NA, color = "darkred", lwd = 0.5) +
theme_void() +
geom_sf_text(data = districts23, aes(label = DISTRICT), size = 5, color = "darkred")
districtPlot
ggplot() + districtPlot$layers + pctBlackPlot$layers
ggplot() + districtPlot + pctBlackPlot
ggplot() + districtPlot$layers + pctBlackPlot$layers
ggplot() + districtPlot + pctBlackPlot$layers
districtPlot + pctBlackPlot
districtPlot + pctBlackPlot$layers
pctBlackPlot + districtPlot$layers
districtPlot <- ggplot() +
geom_sf(data = districts23, fill = NA, color = "darkred", lwd = 0.5) +
theme_void() +
geom_sf_text(data = districts23, aes(label = DISTRICT), size = 5, color = "red")
districtPlot
districtPlot <- ggplot() +
geom_sf(data = districts23, fill = NA, color = "darkred", lwd = 0.5) +
theme_void() +
geom_sf_text(data = districts23, aes(label = DISTRICT), size = 5, color = "red")
districtPlot
pctBlackPlot + districtPlot$layers
View(districtPlot)
pctBlackPlot + districtPlot$layers[[1]]
districts23_estimates <- st_intersection(blockgroups_calc, districts21) %>%
mutate(
awTot = Total * as.numeric(st_area(geom) / bgarea),
awBlack = Black * as.numeric(st_area(geom) / bgarea)
) %>%
st_drop_geometry() %>%
group_by(DISTRICT) %>%
summarize(bgTotal = sum(awTot),
bgBlack = sum(awBlack))
districts23_estimates <- st_intersection(blockgroups_calc, districts23) %>%
mutate(
awTot = Total * as.numeric(st_area(geom) / bgarea),
awBlack = Black * as.numeric(st_area(geom) / bgarea)
) %>%
st_drop_geometry() %>%
group_by(DISTRICT) %>%
summarize(bgTotal = sum(awTot),
bgBlack = sum(awBlack))
districts21_join_bg <- districts23 %>%
left_join(districts21_estimates, by = "DISTRICT") %>%
mutate(pctBlackbg = round(bgBlack / bgTotal * 100, 1))
districts23_estimates <- st_intersection(blockgroups_calc, districts23) %>%
mutate(
awTot = Total * as.numeric(st_area(geom) / bgarea),
awBlack = Black * as.numeric(st_area(geom) / bgarea)
) %>%
st_drop_geometry() %>%
group_by(DISTRICT) %>%
summarize(bgTotal = sum(awTot),
bgBlack = sum(awBlack))
districts23_join_bg <- districts23 %>%
left_join(districts23_estimates, by = "DISTRICT") %>%
mutate(pctBlackbg = round(bgBlack / bgTotal * 100, 1))
View(districts23_join_bg)
View(districtPlot)
View(districts23_join_bg)
pctBlackPlot + districtPlot$layers
# Chunk 1: environment-setup
# record all the packages you are using here
# this includes any calls to library(), require(),
# and double colons such as here::i_am()
packages <- c("tidyverse", "here", "sf", "tmap", "tidycensus","knitr", "htmltools", "markdown")
# force all conflicts to become errors
# if you load dplyr and use filter(), R has to guess whether you mean dplyr::filter() or stats::filter()
# the conflicted package forces you to be explicit about this
# disable at your own peril
# https://conflicted.r-lib.org/
require(conflicted)
# load and install required packages
# https://groundhogr.com/
if (!require(groundhog)) {
install.packages("groundhog")
require(groundhog)
}
# this date will be used to determine the versions of R and your packages
# it is best practice to keep R and its packages up to date
groundhog.day <- "2025-02-01"
# this replaces any library() or require() calls
groundhog.library(packages, groundhog.day)
# you may need to install a correct version of R
# you may need to respond OK in the console to permit groundhog to install packages
# you may need to restart R and rerun this code to load installed packages
# In RStudio, restart r with Session -> Restart Session
# record the R processing environment
# alternatively, use devtools::session_info() for better results
writeLines(
capture.output(sessionInfo()),
here("procedure", "environment", paste0("r-environment-", Sys.Date(), ".txt"))
)
# save package citations
knitr::write_bib(c(packages, "base"), file = here("software.bib"))
# set up default knitr parameters
# https://yihui.org/knitr/options/
knitr::opts_chunk$set(
echo = FALSE, # Run code, show outputs (don't show code)
fig.retina = 4,
fig.width = 8,
fig.path = paste0(here("results", "figures"), "/")
)
# Chunk 2
includeMarkdown(here("data", "metadata", "precincts20.md"))
# Chunk 3
includeMarkdown(here("data", "metadata", "districts23.md"))
# Chunk 4
includeMarkdown(here("data", "metadata", "blockgroups2020.md"))
# Chunk 5
census_metadata_file <- here("data", "metadata", "census2020pl_vars.csv")
if(file.exists(census_metadata_file)){
census2020pl_vars <- read.csv(census_metadata_file)
} else {
census2020pl_vars <- load_variables(2020, "pl")
write.csv(census2020pl_vars, here("data", "metadata", "census2020pl_vars.csv"))
}
# Chunk 6
blockgroup_file <- here("data", "raw", "public", "block_groups.gpkg")
# if the data is already downloaded, just load it
# otherwise, query from the census and save
if(file.exists(blockgroup_file)){
blockgroups <- st_read(blockgroup_file)
} else {
blockgroups <- get_decennial(geography = "block group",
sumfile = "pl",
table = "P3",
year = 2020,
state = "Alabama",
output = "wide",
geometry = TRUE,
keep_geo_vars = TRUE)
st_write(blockgroups, blockgroup_file)
}
tempdir()
list.files(tempdir(), full.names = TRUE)
dataObj <- jsonlite::fromJSON("~/.local/share/rstudio/history_database", simplifyVector = T)
# Read all lines from the history file
history_lines <- readLines("~/.local/share/rstudio/history_database")
# Remove the timestamps (everything before and including the first colon ":")
clean_history <- sub("^[0-9]+:", "", history_lines)
# Print cleaned lines (to check the output)
head(clean_history, 20)  # Show first 20 lines
# Read all lines from the history file
history_lines <- readLines("~/.local/share/rstudio/history_database")
# Remove the timestamps (everything before and including the first colon ":")
clean_history <- sub("^[0-9]+:", "", history_lines)
clean_history <- gsub('\\"', '"', clean_history)
# Print cleaned lines (to check the output)
head(clean_history, 20)  # Show first 20 lines
# Read all lines from the history file
history_lines <- readLines("~/.local/share/rstudio/history_database")
# Remove the timestamps (everything before and including the first colon ":")
clean_history <- sub("^[0-9]+:", "", history_lines)
clean_history <- gsub('\"', '"', clean_history)
# Print cleaned lines (to check the output)
head(clean_history, 20)  # Show first 20 lines
# Read all lines from the history file
history_lines <- readLines("~/.local/share/rstudio/history_database")
